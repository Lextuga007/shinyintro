[["index.html", "Building Web Apps with R Shiny Overview 0.1 Example Apps 0.2 Code Horizons Course (27-30 July 2021) 0.3 Computing 0.4 Who Should Register? 0.5 Glossary", " Building Web Apps with R Shiny Lisa DeBruine 2021-07-06 Overview Shiny apps let you make web applications that do anything you can code in R. For example, you can share your data analysis in a dynamic way with people who don’t use R, collect and visualize data, or even make data aRt. While there is a wealth of material available on the internet to help you get started with Shiny, it can be difficult to see how everything fits together. This class will take a predominantly live coding approach, rather than a lecture-only approach, so you can code along with the instructor and deal with the inevitable bugs and roadblocks together. This class will teach you the basics of Shiny app programming, giving you skills that will form the basis of almost any app you want to build. By the end of the class, you will have created a custom app that collects and saves data, allows users to dynamically visualize the data, and produces downloadable reports. 0.1 Example Apps The following are some diverse examples of Shiny apps that the instructor has made. Plot Demo Simulate data from a 2×2 factorial design and visualize it with 6 different plot styles. Simulating for LMEM companion to Understanding mixed effects models through data simulation (DeBruine &amp; Barr, AMPPS 2021) Scienceverse is an ambitious (but in-progress) app for creating machine-readable descriptions of studies and human-readable summaries. Word Cloud Create a word cloud from text and customize its appearance. Created during the live-coding event at Hack Your Data Beautiful. Figure 0.1: Word Cloud App 0.2 Code Horizons Course (27-30 July 2021) Starting July 27, we are offering this seminar as a 4-day synchronous*, remote workshop for the first time. Each day will consist of a 3-hour live lecture held via the free video-conferencing software Zoom. You are encouraged to join the lecture live, but will have the opportunity to view the recorded session later if you are unable to attend at the scheduled time. Each lecture session will conclude with a hands-on exercise reviewing the content covered, to be completed on your own. An additional lab session will be held Tuesday and Thursday afternoons, where you can review the exercise results with the instructor and ask any questions. We understand that scheduling is difficult during this unpredictable time. If you prefer, you may take all or part of the course asynchronously. The video recordings will be made available within 24 hours of each session and will be accessible for two weeks after the seminar, meaning that you will get all of the class content and discussions even if you cannot participate synchronously. Closed captioning is available for all live and recorded sessions. 0.3 Computing To participate in the hands-on exercises, you are strongly encouraged to use a computer with the most recent version of R installed. Participants are also encouraged to download and install RStudio, a front-end for R that makes it easier to work with. This software is free and available for Windows, Mac, and Linux platforms. 0.4 Who Should Register? You need to have basic familiarity with R, including data import, data processing, visualization, and functions and control structures (e.g., if/else). Instruction will be done using RStudio. Some familiarity with ggplot2 and dplyr would be useful. You definitely do not need to be an expert coder, but the following code should not be challenging to understand. library(ggplot2) pets &lt;- read.csv(&quot;pets.csv&quot;) dv &lt;- sample(c(&quot;score&quot;, &quot;weight&quot;), 1) if (dv == &quot;score&quot;) { g &lt;- ggplot(pets, aes(pet, score, fill = country)) } else if (dv == &quot;weight&quot;) { g &lt;- ggplot(pets, aes(pet, weight, fill = country)) } r + geom_violin(alpha = 0.5) If you want to brush up on your R (especially tidyverse), and also gain familiarity with the instructor’s teaching style, the first seven chapters of Data Skills for Reproducible Science provide a good overview. 0.5 Glossary term definition data-wrangling The process of preparing data for visualisation and statistical analysis. function A named section of code that can be reused. rstudio An integrated development environment (IDE) that helps you process R code. shiny An R package that builds interactive web apps tidyverse A set of R packages that help you create and work with tidy data "],["getting-started.html", "Day 1 Getting Started 1.1 Your First Shiny App 1.2 ShinyDashboard", " Day 1 Getting Started 1.1 Your First Shiny App 1.1.1 Overview of the UI/server structure 1.1.2 Inputs, outputs, and action buttons 1.1.3 Reactive functions 1.2 ShinyDashboard 1.2.1 Basic template for shinydashboard projects 1.2.2 Sidebar, menu navigation, and tabs 1.2.3 Row- and column-based layouts "],["basic-patterns.html", "Day 2 Basic Patterns 2.1 Different input types 2.2 Different output types 2.3 Reading and saving data 2.4 Reactive functions", " Day 2 Basic Patterns Welcome to Day 2!. Today we’ll expand on what we learned in Day 1 to cover input and output in more depth. We’ll also learn how to read and write data to and from files. In the second half of Day 2, we’ll expand what we’ve learned about reactivity and practice some common reactive patterns. 2.1 Different input types Inputs are ways that users can communicate information to the Shiny app. Explore some different input types in the embedded app below before you read about how to set up each type. You can run this app locally with shinyintro::app(\"input_demo\") or view it in a separate tab with the [showcase interface](&lt;https://shiny.psy.gla.ac.uk/debruine/input_demo/({target=\"_blank\"}. Figure 2.1: Input Demo App 2.1.1 textInput textInput() creates a one-line box for short text input. demo_text &lt;- textInput(&quot;demo_text&quot;, label = &quot;Name&quot;, value = &quot;&quot;, width = &quot;100%&quot;, placeholder = &quot;Your Name&quot;) 2.1.2 textAreaInput textAreaInput() creates a multi-line box for longer text input. demo_textarea &lt;- textAreaInput(&quot;demo_textarea&quot;, label = &quot;Biography&quot;, value = &quot;&quot;, width = &quot;100%&quot;, rows = 5, placeholder = &quot;Tell us something interesting about you.&quot;) 2.1.3 selectInput sekectInput() creates a drop-down menu. Set the first choice to \"\" to default to NA. If your choices are a named list, the names are what is shown and the values are what is recorded. If the choices aren’t named, the displayed and recorded values are the same. demo_select &lt;- selectInput(&quot;demo_select&quot;, label = &quot;Do you like Shiny?&quot;, choices = list(&quot;&quot;, &quot;Yes, I do&quot; = &quot;y&quot;, &quot;No, I don&#39;t&quot; = &quot;n&quot;), selected = NULL, width = &quot;100%&quot;) You can also make a select where users can choose multiple options. genders &lt;- list( # no blank needed &quot;Non-binary&quot; = &quot;nb&quot;, &quot;Male&quot; = &quot;m&quot;, &quot;Female&quot; = &quot;f&quot;, &quot;Agender&quot; = &quot;a&quot;, &quot;Gender Fluid&quot; = &quot;gf&quot; ) demo_select_multi &lt;- selectInput(&quot;demo_select2&quot;, label = &quot;Gender (select all that apply)&quot;, choices = genders, selected = NULL, multiple = TRUE, selectize = FALSE, size = 5) 2.1.4 checkboxGroupInput However, this interface almost always looks better with a checkbox group. demo_cbgi &lt;- checkboxGroupInput(&quot;demo_cbgi&quot;, label = &quot;Gender (select all that apply)&quot;, choices = genders) 2.1.5 checkboxInput You can also make a single checkbox. The value is TRUE when checked and FALSE when not. demo_cb &lt;- checkboxInput(&quot;demo_cb&quot;, label = &quot;I love R&quot;, value = TRUE) Sliders allow you to choose numbers between a minimum and maximum. demo_slider &lt;- sliderInput(&quot;demo_slider&quot;, label = &quot;Age&quot;, min = 0, max = 100, value = 0, step = 1, width = &quot;100%&quot;) 2.1.6 Setting inputs programatically Sometimes you need to change the value of an input with code, such as when resetting a questionnaire or in response to an answer on another item. The following code reseats all of the inputs above. updateTextInput(session, &quot;demo_text&quot;, value = &quot;&quot;) updateTextAreaInput(session, &quot;demo_textarea&quot;, value = &quot;&quot;) updateSelectInput(session, &quot;demo_select&quot;, selected = &quot;&quot;) updateCheckboxGroupInput(session, &quot;demo_cbgi&quot;, selected = character(0)) updateCheckboxInput(session, &quot;demo_cb&quot;, value = TRUE) updateSliderInput(session, &quot;demo_slider&quot;, value = 0) Note that select inputs and checkbox groups use the argument selected and not value. If you want to set all the values in a checkbox group to unchecked, set selected = character(0). 2.2 Different output types Output are ways that the Shiny app can dynamically display information to the user. In the user interface (UI), you create outputs with IDs that you reference in and associated rendering function inside the server function. Explore some different output types in the embedded app below before you read about how to set up each type. You can run this app locally with shinyintro::app(\"output_demo\") or view it in a separate tab with the [showcase interface](&lt;https://shiny.psy.gla.ac.uk/debruine/output_demo/({target=\"_blank\"}. Figure 2.2: Output Demo App 2.2.1 textOutput The function textOutput() defaults to text inside a &lt;span&gt; or &lt;div&gt; element, but you can use a different element with the container argument. # in the UI textOutput(&quot;demo_text&quot;, container = tags$h3) # in the server function output$demo_text &lt;- renderText({ sprintf(&quot;Plot of %s&quot;, input$y) }) If you use verbatimTextOutput() in the UI (no change to the server function), it will show the output in a fixed-width font. This can be good for code or text you want the user to copy. # in the UI verbatimTextOutput(&quot;demo_verbatim&quot;) # in the server function output$demo_verbatim &lt;- renderText({ code &lt;- &quot;ggplot(iris, aes(x = Species, y = %s, color = Species)) + geom_violin(show.legend = FALSE) + stat_summary(show.legend = FALSE)&quot; sprintf(code, input$y) }) 2.2.2 uiOutput If you want to dynamically create parts of the user interface (UI), you can use uiOutput(). You can create the user interface using the input functions # in the UI uiOutput(&quot;demo_ui&quot;) # in the server function output$demo_ui &lt;- renderUI({ cols &lt;- names(iris)[1:4] selectInput(&quot;y&quot;, &quot;Column to plot&quot;, cols, &quot;Sepal.Length&quot;) }) The function htmlOutput() is exactly the same as uiOutput(), so you might see that in some code examples, but I use uiOutput() to make the connection with renderUI() clearer, since there is no renderHTML(). 2.2.3 plotOutput # in the UI plotOutput(&quot;demo_plot&quot;) # in the server function output$demo_plot &lt;- renderPlot({ ggplot(iris, aes(x = Species, y = .data[[input$y]], color = Species)) + geom_violin(show.legend = FALSE) + stat_summary(show.legend = FALSE) + ylab(input$y) }) If you want to create dynamic plots that change with input, note how you need to use y = .data[[input$y]] inside the aes() function, instead of just y = input$y. 2.2.4 imageOutput # in the UI imageOutput(&quot;demo_image&quot;) # in the server function output$demo_image &lt;- renderImage({ list(src = &quot;images/flower.jpg&quot;, width = 100, height = 100, alt = &quot;A flower&quot;) }, deleteFile = FALSE) You can dynamically display images of any type, but one of the most useful ways to use image outputs is to control the aspect ratio and relative size of plots. When you save a temporary file, you should set deleteFile = TRUE in the renderImage() function (this stops unneeded plots using memory). # in the UI imageOutput(&quot;demo_image&quot;) # in the server function output$demo_image &lt;- renderImage({ # make the plot g &lt;- ggplot(iris, aes(x = Species, y = .data[[input$y]], color = Species)) + geom_violin(show.legend = FALSE) + stat_summary(show.legend = FALSE) + ylab(input$y) # save to a temporary file plot_file &lt;- tempfile(fileext = &quot;.png&quot;) ggsave(plot_file, demo_plot(), units = &quot;in&quot;, dpi = 72, width = 7, height = 5) # Return a list containing the filename list(src = plot_file, width = &quot;100%&quot;, # don&#39;t set the height to keep aspect ratio alt = &quot;The plot&quot;) }, deleteFile = TRUE) 2.2.5 tableOutput The reanderTable() function will display a table from any data frame it returns. # in the UI tableOutput(&quot;demo_table&quot;) # in the server function output$demo_table &lt;- renderTable({ iris %&gt;% group_by(Species) %&gt;% summarise(mean = mean(.data[[input$y]]), sd = sd(.data[[input$y]])) }) Note how you need to use .data[[input$y]] inside the dplyr::summarise() function, instead of just input$y to dynamically choose which variable to summarise. 2.2.6 dataTableOutput If you have a long table to show, or one that you want users to be able to sort or search, use dataTableOutput(). You can customise data tables in many ways, but we’ll stick with a basic example here. # in the UI DT::dataTableOutput(&quot;demo_datatable&quot;) # in the server function output$demo_datatable &lt;- DT::renderDataTable({ iris }, options = list(pageLength = 10)) The basic shiny package has dataTableOutput() and renderDataTable() functions, but they can be buggy. The version in the DT package are better and have some additional functions, so I use those. 2.3 Reading and saving data 2.3.1 Local Data You can read and write data from a Shiny app the same way you do from any R script. We will focus on reading data, since writing data locally can cause problems and is better done with Google Sheets. The base directory for a Shiny app is the directory that app.R is in. I recommend keeping your data in a directory called “data” to keep things tidy. # read local data my_data &lt;- readxl::read_xls(&quot;data/my_data.xls&quot;) # read data on the web countries &lt;- readr::read_csv(&quot;https://datahub.io/core/country-list/r/data.csv&quot;) languages &lt;- jsonlite::read_json(&quot;https://datahub.io/core/language-codes/r/language-codes.json&quot;) 2.3.2 Google Sheets One of the best ways to start collecting data with a Shiny app is with Google Sheets. This allows you to collect data to the same place from multiple servers, which might happen if you’re running the app locally on more than one computer or through a service like shinyapps.io. The R package googlesheets4 makes it easy to work with Google Sheets from R. If you just want to read data from a public Google Sheet, you don’t need any authorisation. Just start your code with gs4_deauth() after you load the googlesheets4 library (otherwise you’ll be prompted to log in). Then you can read data like this: library(googlesheets4) gs4_deauth() sheet_id &lt;- &quot;https://docs.google.com/spreadsheets/d/1tQCYQrI4xITlPyxb9dQ-JpMDYeADovIeiZZRNHkctGA/&quot; read_sheet(sheet_id) number letter 1 A 2 B 3 C However, even if a Google Sheet is publicly editable, you can’t add data to it without authorising your account. data &lt;- data.frame(number = 4, letter = &quot;D&quot;) sheet_append(sheet_id, data) ## Error: Client error: (401) UNAUTHENTICATED ## * Request not authenticated due to missing, invalid, or expired OAuth token. ## * Request is missing required authentication credential. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project. You can authorise interactively using the following code (and your own email), which will prompt you to authorise “Tidyverse API Packages” the first time you do this. gs4_auth(email = &quot;debruine@gmail.com&quot;) However, this won’t work if you want your Shiny apps to be able to access your Google Sheets. 2.3.2.1 Authorisation for Apps First, you need to get a token and store it in a cache folder in your app directory. We’re going to call that directory “.secrets.” Run the following code in your console (NOT in an Rmd file). This will open up a web browser window and prompt you to choose your Google account and authorise “Tidyverse API Packages.” setwd(app_directory) gs4_auth(email = &quot;debruine@gmail.com&quot;, cache = &quot;.secrets&quot;) # optionally, authorise google drive to search your drive # googledrive::drive_auth(email = &quot;debruine@gmail.com&quot;, cache = &quot;.secrets&quot;) Figure 2.3: Prompts to choose an account, grant permissions, and confirm. When you have finished, you will see a page that says something like, “Authentication complete. Please close this page and return to R.” In the file pane in RStudio, you should now see a directory. called “.secrets” in the app directory. If you are using GitHub, you don’t want to save your secret info to a public repository, so run the following code to ignore any directories called “.secrets” (so they will only exist on your computer and not on GitHub). usethis::use_git_ignore(&quot;.secrets&quot;) usethis::use_git_ignore(&quot;*/.secrets&quot;) Now, you can include the following code at the top of your app.R script to authorise the app to read from and write to your files. gs4_auth(cache = &quot;.secrets&quot;, email = &quot;debruine@gmail.com&quot;) 2.3.2.2 Accessing an existing sheet If you have an existing Google Sheet, you can access it by URL. sheet_id &lt;- &quot;https://docs.google.com/spreadsheets/d/1tQCYQrI4xITlPyxb9dQ-JpMDYeADovIeiZZRNHkctGA/&quot; data &lt;- data.frame(number = 4, letter = &quot;D&quot;) sheet_append(sheet_id, data) read_sheet(sheet_id) number letter 1 A 2 B 3 C 4 D 2.3.2.3 Make a new sheet You can set up a new Google Sheet with code. You only need to do this once for a sheet that you will use with a Shiny app, and you will need to save the sheet ID. If you don’t specify the tab name(s), the sheet will be created with one tab called “Sheet1.” I recommend making only one sheet per app and saving each table in a separate tab. id &lt;- gs4_create(&quot;demo2&quot;, sheets = c(&quot;demographics&quot;, &quot;questionnaire&quot;)) id ## Spreadsheet name: demo2 ## ID: 1bwXa-eTlCX9Zg2nG1L4iC6Zh1TPZKLjp5zw-LY-HuAU ## Locale: en_US ## Time zone: Europe/London ## # of sheets: 2 ## ## (Sheet name): (Nominal extent in rows x columns) ## demographics: 1000 x 26 ## questionnaire: 1000 x 26 Include the ID at the top of your app like this: SHEET_ID 2.3.2.4 Add data You can add an empty data structure to your sheet by specifying the data types of each column like this: data &lt;- data.frame( name = character(0), birthyear = integer(0), parent = logical(0), score = double(0) ) write_sheet(data, SHEET_ID, &quot;demographics&quot;) read_sheet(SHEET_ID, &quot;demographics&quot;) %&gt;% names() ## [1] &quot;name&quot; &quot;birthyear&quot; &quot;parent&quot; &quot;score&quot; Or you can populate the table with starting data. data &lt;- data.frame( name = &quot;Lisa&quot;, birthyear = 1976L, R_user = TRUE, score = 10.2 ) write_sheet(data, SHEET_ID, &quot;demographics&quot;) read_sheet(SHEET_ID, &quot;demographics&quot;) name birthyear R_user score Lisa 1976 TRUE 10.2 Notice that birthyear is a double, not an integer. Google Sheets only have one numeric type, so both doubles and integers are coerced to doubles. 2.3.2.5 Appending Data Then you can append new rows of data to the sheet. data &lt;- data.frame( name = &quot;Robbie&quot;, birthyear = 2007, R_user = FALSE, score = 12.1 ) sheet_append(SHEET_ID, data, &quot;demographics&quot;) read_sheet(SHEET_ID, &quot;demographics&quot;) name birthyear R_user score Lisa 1976 TRUE 10.2 Robbie 2007 FALSE 12.1 If you try to append data of a different type, some weird things can happen. Logical values added to a numeric column are cast as 0 (FALSE) and 1 (TRUE), while numeric values added to a logical column change the column to numeric. If you mix character and numeric values in a column, the resulting column is a column of one-item lists so that each list can have the appropriate data type. (Data frames in R cannot mix data types in the same column.) data &lt;- data.frame( name = 1, birthyear = FALSE, R_user = 0, score = &quot;No&quot; ) sheet_append(SHEET_ID, data, &quot;demographics&quot;) read_sheet(SHEET_ID, &quot;demographics&quot;) name birthyear R_user score Lisa 1976 1 10.2 Robbie 2007 0 12.1 1 0 0 No You must append data that has the same number and order of columns as the Google Sheet. If you send columns out of order, they will be recorded in the order you sent them, not in the order of the column names. If you send extra columns, the append will fail. The Shiny template we’re working with has a safer version of sheet_append() that you can access by uncommenting the line: # source(\"R/sheet_append.R\") This version gracefully handles data with new columns, missing columns, columns in a different order, and columns with a different data type. However, it reads the whole data sheet before deciding whether to append or overwrite the data, which can slow down your app, so is best used only during development when you’re changing things a lot. Once you have the final structure of your data, it’s better to use the original googlesheets4::sheet_append() function. 2.4 Reactive functions "],["more-complex-apps.html", "Day 3 More Complex Apps 3.1 Customizing Your Apps 3.2 Intermediate Patterns", " Day 3 More Complex Apps 3.1 Customizing Your Apps 3.1.1 CSS, HTML, and Javascript 3.1.2 Structuring a complex app 3.2 Intermediate Patterns 3.2.1 Debugging and error handling Bugs are a part of coding. A great coder isn’t someone who writes bug-free code on the first try (this is an unachievable goal), but rather someone who knows how to efficiently catch bugs. This sections presents a few simple ways to debug your Shiny app. See the article Debugging Shiny applications for further debugging strategies, including breakpoints and reactlog. 3.2.1.1 RStudio Console Messages Sending messages to the console is a simple way to debug your code. I like to keep track of what functions are being called by starting every function inside the server function with a message. The template includes a custom message logging function that helps you use this with both development and deployed apps: debug_msg(). For example, the code below prints “questionnaire submitted” every time the action button q_submit is pressed. It prints to the RStudio console when you’re developing and to the javascript console for deployed apps. observeEvent(input$q_submit, { debug_msg(&quot;questionnaire submitted&quot;) # rest of code ... }) 3.2.1.2 JavaScript Console I use FireFox Developer Edition when I’m developing web apps, but Chrome also has developer tools. In FireFox, go to Tools &gt; Browser Tools &gt; Web Developer Tools (opt-cmd-I). In Chrome, go to View &gt; Developer &gt; Developer Tools (opt-cmd-I). You can dock the tools to the bottom, right , or left of the window, or as a separate window. Figure 3.1: Javascript consoles in FireFox Developer Edition and Chrome. Shiny puts a lot of info you won’t care about into the logs, so our debug_msg() function writes messages to the debug console. You can filter just those messages by choosing only “Debug” in FireFox or “Verbose” in Chrome. 3.2.1.3 Showcase Mode You can view an app in showcase mode by setting “DisplayMode” to “Showcase” (instead of “Normal”) in the DESCRIPTION file in the app directory. When you’re in this mode, you can see your app code, css files, and javascript files. The functions in your server function will highlight in yellow each time they are run. However, this isn’t much help if many of your functions are in external files or you are using modules. Also, if your script is very long, you won’t be able to see the highlighting unless you’ve scrolled to the right section, so I find it more straightforward to use the message method described above. Title: Questionnaire Template Author: Lisa DeBruine License: CC-BY-4.0 DisplayMode: Showcase Type: Shiny Figure 3.2: Showcase mode. 3.2.1.4 tryCatch You’ve probably experienced the greyed out screen of a crashed app more than enough now. In development, the next step is to look at the console to see if you have a warning or error message. If you’re lucky, you can figure out where in the code this is happening (this is easier if you start all your functions with a debug message). 3.2.2 Displaying elements contingent on the state of other elements "],["sharing-download-and-repeating.html", "Day 4 Sharing, Download and Repeating 4.1 Sharing your Apps 4.2 Creating and downloading a customized report 4.3 Shiny modules for repeated structures", " Day 4 Sharing, Download and Repeating Welcome to Day 4! Today we’ll learn one of the most important aspects of Shiny coding: how to share your apps with other people. In the second half of Day 4, we’ll learn how to create customized reports to show your users in the Shiny app and how to download them. We’ll also learn about modules, which can help you avoid repeating chunks of very similar code. 4.1 Sharing your Apps 4.1.1 shinyapps.io Open Tools &gt; Global Options ... Go to the Publishing tab Click the Connect button and choose ShinyApps.io Click on the link to go to your account Click the Sign Up button and Sign up with GitHub You should now be in your shinyapps.io dashboard; click on your name in the upper right and choose Tokens Add a token Click Show next to the token and copy the text to the clipboard Go back to RStudio and paste the text in the box and click Connect Account Make sure the box next to “Enable publishing…” is ticked, click Apply, and close the options window ˙ You can test this by creating a simple app. If you have the shinyintro package, use the code below. shinyintro::newapp(&quot;mytestapp&quot;, &quot;input_demo&quot;) Open the app.R file and go to File &gt; Publish... in the menu (or click on the blue icon in the upper right corner of the source pane). Make sure these are the right files for your app, edit the title if you want, and click Publish. A web browser window will open after a few seconds showing your app online! You can now share it with your friends and colleagues. If publishing fails, check the Console pane. If you already have too many apps on shinyapps.io, you’ll see the message, “You have reached the maximum number of applications allowed for your account.” You can archive some of your apps from the shinyapps.io dashboard if this is the problem. 4.1.2 Self-hosting a shiny server Setting up a shiny server is beyond the scope of this class, but if you have access to one, you can ask the administrator how to access the correct directories and upload your app directories there. This solution is good if you want to save data locally and do not want to use Google Sheets. You can’t save data locally on shinyapps.io. If you save data locally on a shiny server, you may need to change the owner or permissions of the directory you save data in so that the web user can write to it. Ask the administrator of the server for help if this doesn’t make any sense to you. 4.1.3 GitHub GitHub is a great place to organise and share your code using version control. You can also use it to host Shiny app code for others to download and run on their own computer with RStudio. See Appendix B for instructions on how to set up git and a GitHub account. 4.1.4 In an R package 4.1.5 Exercises 4.1.5.1 1. Shinyapps.io Upload another demo app to shinyapps.io. Check that you can access it online. Archive the app in the shinyapps.io dashboard. 4.2 Creating and downloading a customized report 4.3 Shiny modules for repeated structures If you find yourself making nearly identical UIs or functions over and over in the same app, you might benefit from modules. This is a way to You can run this app locally with shinyintro::app(\"modules_demo\") or view it in a separate tab with the [showcase interface](&lt;https://shiny.psy.gla.ac.uk/debruine/modules_demo/({target=\"_blank\"}. Figure 4.1: Modules Demo App 4.3.1 Modularizing the UI The two tabPanels below follow nearly identical patterns. You can often identify a place where modules might be useful when you use a naming convention like {base}_{type} for the ids. iris_tab &lt;- tabPanel( &quot;iris&quot;, selectInput(&quot;iris_dv&quot;, &quot;DV&quot;, choices = names(iris)[1:4]), plotOutput(&quot;iris_plot&quot;), DT::dataTableOutput(&quot;iris_table&quot;) ) mtcars_tab &lt;- tabPanel( &quot;mtcars&quot;, selectInput(&quot;mtcars_dv&quot;, &quot;DV&quot;, choices = c(&quot;mpg&quot;, &quot;disp&quot;, &quot;hp&quot;, &quot;drat&quot;)), plotOutput(&quot;mtcars_plot&quot;), DT::dataTableOutput(&quot;mtcars_table&quot;) ) The first step in modularising your code is to make a function that creates the UIs above from the base ID and any other changing aspects. In the example above, the choices are different for each selectInput, so we’ll make a function that has the arguments id and choices. The first line of a UI module function is always ns &lt;- NS(id), which creates a shorthand way to add the base id to the id type. So instead of the selectInput’s name being “iris_dv” or “mtcars_dv,” we set it as ns(\"dv\"). All ids need to use this ns() function. tabPanelUI &lt;- function(id, choices) { ns &lt;- NS(id) tabPanel( id, selectInput(ns(&quot;dv&quot;), &quot;DV&quot;, choices = choices), plotOutput(ns(&quot;plot&quot;)), DT::dataTableOutput(ns(&quot;table&quot;)) ) } Now, you can replace two tabPanel definitions with just the following code. iris_tab &lt;- tabPanelUI(&quot;iris&quot;, names(iris)[1:4]) mtcars_tab &lt;- tabPanelUI(&quot;mtcars&quot;, c(&quot;mpg&quot;, &quot;disp&quot;, &quot;hp&quot;, &quot;drat&quot;)) 4.3.2 Modularizing server functions In our original code, we have four functions that create the two output tables and two output plots, but these are also largely redundant. output$iris_table &lt;- DT::renderDataTable({ iris }) output$iris_plot &lt;- renderPlot({ ggplot(iris, aes(x = Species, y = .data[[input$iris_dv]], fill = Species)) + geom_violin(alpha = 0.5, show.legend = FALSE) + scale_fill_viridis_d() }) output$mtcars_table &lt;- DT::renderDataTable({ mtcars }) output$mtcars_plot &lt;- renderPlot({ # handle non-string grouping mtcars$vs &lt;- factor(mtcars$vs) ggplot(mtcars, aes(x = vs, y = .data[[input$mtcars_dv]], fill = vs)) + geom_violin(alpha = 0.5, show.legend = FALSE) + scale_fill_viridis_d() }) The second step to modularising code is creating a server function. You can put all the functions the relate to the inputs and outputs in the UI function here, so we will include one to make the output table and one to make the output plot. The server function takes the base id as the first argument, and then any arguments you need to specify things that change between base implementations. Above, the tables show different data and the plots use different groupings for the x axis and fill, so we’ll add arguments for data and group_by. A server function always contains a moduleServer() function set up like below. tabPanelServer &lt;- function(id, data, group_by) { moduleServer(id, function(input, output, session) { # code ... }) } No you can copy in one set of server functions above, remove the base name (e.g., “iris_” or “mtcars_”) from and inputs or outputs, and replace specific instances of the data or grouping columns with data and group_by. tabPanelServer &lt;- function(id, data, group_by) { moduleServer(id, function(input, output, session) { output$table &lt;- DT::renderDataTable({ data }) output$plot &lt;- renderPlot({ # handle non-string groupings data[[group_by]] &lt;- factor(data[[group_by]]) ggplot(data, aes(x = .data[[group_by]], y = .data[[input$dv]], fill = .data[[group_by]])) + geom_violin(alpha = 0.5, show.legend = FALSE) + scale_fill_viridis_d() }) }) } In the original code, the grouping variables were unquoted, but it’s tricky to pass unquoted variable names to custom functions, and we already know how to refer to columns by a character object using .data[[char_obj]]. The grouping column Species in iris is already a factor, but recasting it as a factor won’t hurt, and is required for the mtcars grouping column vs. Now, you can replace the four functions inside the server function with these two lines of code. tabPanelServer(&quot;iris&quot;, data = iris, group_by = &quot;Species&quot;) tabPanelServer(&quot;mtcars&quot;, data = mtcars, group_by = &quot;vs&quot;) Our example only reduced our code by 4 lines, but it can save a lot of time, effort, and debugging on projects with many similar modules. For example, if you want to change the plots in your app to use a different geom, now you only have to change one function instead of two. 4.3.3 Exercises 4.3.3.1 1. Repeat Example Try to implement the code above on your own. Create a copy of the “no_modules_demo” shinyintro::newapp(\"my_no_modules\", \"no_modules_demo\") Run the app and see how it works Create the UI module function and use it to replace iris_tab and mtcars_tab Create the server function and use it to replace the server functions 4.3.3.2 2. New Instance Add a new tab called “diamonds” that visualises the diamonds dataset. Choose the columns you want as choices in the selectInput() and the grouping column. UI Solution You can choose any of the numeric columns for the choices. diamonds_tab &lt;- tabPanelUI(&quot;diamonds&quot;, c(&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;)) Server Solution You can group by any of the categorical columns: cut, color, or clarity. tabPanelServer(&quot;diamonds&quot;, data = diamonds, group_by = &quot;cut&quot;) 4.3.3.3 3. Altering modules Add another selectInput() to the UI that allows the user to select the grouping variable. (iris only has one possibility, but mtcars and diamonds should have several) UI Solution You need to add a new selectInput() to the tabPanel. Remember to use the ns() function for the id. The choices for this select will also differ by data set, so you need to add group_choices to the arguments of this function. tabPanelUI &lt;- function(id, choices, group_choices) { ns &lt;- NS(id) tabPanel( id, selectInput(ns(&quot;dv&quot;), &quot;DV&quot;, choices = choices), selectInput(ns(&quot;group_by&quot;), &quot;Group By&quot;, choices = group_choices), plotOutput(ns(&quot;plot&quot;)), DT::dataTableOutput(ns(&quot;table&quot;)) ) } Update the plot function to use the value of this new input instead of “Species,” “vs,” and whatever you chose for diamonds. Server Solution You no longer need group_by in the arguments for this function because you are getting that info from an input. Instead of changing group_by to input$group_by in three places in the code below, I just added the line group_by &lt;- input$group_by at the top of the moduleServer() function. tabPanelServer &lt;- function(id, data) { moduleServer(id, function(input, output, session) { group_by &lt;- input$group_by # rest of the code is the same ... }) } 4.3.3.4 4. New module There is a fluidRow() before the tabsetPanel() in the ui that contains three infoBoxOutput() and three renderInfoBoxOutput() functions in the server function. Modularise the info boxes and their associated server functions. UI Function infoBoxUI &lt;- function(id, width = 4) { ns &lt;- NS(id) infoBoxOutput(ns(&quot;box&quot;), width) } Server Function infoBoxServer &lt;- function(id, title, fmt, icon, color = &quot;purple&quot;) { moduleServer(id, function(input, output, session) { output$box &lt;- renderInfoBox({ infoBox(title = title, value = format(Sys.Date(), fmt), icon = icon(icon), color = color) }) }) } UI Code In the ui, replace the fluidRow() with this: fluidRow( infoBoxUI(&quot;day&quot;), infoBoxUI(&quot;month&quot;), infoBoxUI(&quot;year&quot;) ) Server Code In the server() function, replace the renderInfoBox() functions with this: infoBoxServer(&quot;year&quot;, &quot;Year&quot;, &quot;%Y&quot;, &quot;calendar&quot;) infoBoxServer(&quot;month&quot;, &quot;Month&quot;, &quot;%m&quot;, &quot;calendar-alt&quot;) infoBoxServer(&quot;day&quot;, &quot;Day&quot;, &quot;%d&quot;, &quot;calendar-day&quot;)) "],["installing-r.html", "A Installing R A.1 Installing Base R A.2 Installing RStudio A.3 Installing LaTeX", " A Installing R Installing R and RStudio is usually straightforward. The sections below explain how and there is a helpful YouTube video here. A.1 Installing Base R Install base R from https://cran.rstudio.com/. Choose the download link for your operating system (Linux, Mac OS X, or Windows). If you have a Mac, install the latest release from the newest R-x.x.x.pkg link (or a legacy version if you have an older operating system). After you install R, you should also install XQuartz to be able to use some visualisation packages. If you are installing the Windows version, choose the “base” subdirectory and click on the download link at the top of the page. After you install R, you should also install RTools; use the “recommended” version highlighted near the top of the list. If you are using Linux, choose your specific operating system and follow the installation instructions. A.2 Installing RStudio Go to rstudio.com and download the RStudio Desktop (Open Source License) version for your operating system under the list titled Installers for Supported Platforms. A.3 Installing LaTeX You can install the LaTeX typesetting system to produce PDF reports from RStudio. Without this additional installation, you will be able to produce reports in HTML but not PDF. To generate PDF reports, you will additionally need: pandoc, and LaTeX, a typesetting language, available for WINDOWS: MikTeX Mac OS: MacTex (3.2GB download) or BasicTeX (78MB download, but should work fine) Linux: TeX Live "],["setup-git.html", "B Git and GitHub B.1 Get a GitHub account B.2 Set up RStudio B.3 Set your GitHub info B.4 Create an SSH Key on RStudio B.5 Create an SSH Key on GitHub", " B Git and GitHub There are many reasons to use version control. Git is one option and it is well-integrated into RStudio. GitHub is a free service to store your version controlled projects in the cloud and (optionally) share them with others. B.1 Get a GitHub account Go to GitHub and create a new account. Make sure your username is professional Use an email address that you won’t lose access to (e.g., gmail) B.2 Set up RStudio If you are a UofG INP staff/student, you can access the Glasgow Psychology RStudio site and skip to Set your GitHub info. If you are working from your own computer, follow the next 2 sub-steps: B.2.1 Install git You can check if git is already installed on your computer by going to Shell... under the Tools menu (or just open a terminal window) and typing which git. If you get an answer like /usr/local/bin/git then git is already installed. If not, install git and then use which git to check where it is installed. B.2.2 Enable version control in RStudio Go to Global Options... from the Tools menu and set the location of your git executable to the location from the previous step. Figure B.1: Set the location of git B.3 Set your GitHub info Run usethis::edit_git_config() in the console pane; it will open a file called .gitconfig. Replace GITHUB_EMAIL with the email address you used for github and GITHUB_USERNAME with your github username. [user] email = GITHUB_EMAIL name = GITHUB_USERNAME You can skip the rest of the steps if you are using your own computer because you can use https to access github. If you are using an RStudio server or just want to use SSH, follow the steps below. B.4 Create an SSH Key on RStudio Go to Global Options... from the Tools menu Click Create RSA Key... and enter a passphrase Figure B.2: Global options Click on View public key and copy the contents of the box B.5 Create an SSH Key on GitHub Go to GitHub &gt; Settings &gt; SSH and GPG keys Click New SSH Key Put RStudio server as the title (or My Computer Name if on your own computer) Paste your public key into the Key box Click Add SSH key Figure B.3: Add SSH key "],["symbols.html", "C Symbols", " C Symbols Symbol Book Term Also Known As () (round) brackets parentheses [] square brackets brackets {} curly brackets squiggly brackets &lt;&gt; chevrons angled brackets / guillemets &lt; less than &gt; greater than &amp; ampersand “and” symbol # hash pound / octothorpe / slash forward slash \\ backslash - dash hyphen / minus _ underscore * asterisk star ^ caret power symbol ~ tilde twiddle / squiggle = equal sign == double equal sign . full stop period / point ! exclamation mark bang / not ? question mark ’ single quote quote / apostrophe \" double quote quote %&gt;% pipe magrittr pipe | vertical bar pipe , comma ; semi-colon : colon @ “at” symbol various hilarious regional terms "]]
