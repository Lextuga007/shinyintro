[["contingency.html", "Chapter 10 Contingent Display 10.1 Hide and Show 10.2 Changing Styles 10.3 Changing input options 10.4 Glossary 10.5 Exercises", " Chapter 10 Contingent Display Figure 10.1: Contingency Demo App 10.1 Hide and Show I frequently want to make some aspect of a shiny app contingent on the state of another aspect, such as only showing a text input of the value of a select input is “other.” You can use the hide() and show() functions from shinyjs to accomplish this easily. When you set up the UI, wrap any elements that should be hidden at the start in hidden(). # in the ui box(title = &quot;Questions&quot;, solidHeader = TRUE, selectInput(&quot;first_pet&quot;, &quot;What was your first pet?&quot;, c(&quot;&quot;, &quot;dog&quot;, &quot;cat&quot;, &quot;ferret&quot;, &quot;other&quot;)), hidden(textInput(&quot;first_pet_other&quot;, NULL, placeholder = &quot;Specify the other pet&quot;)) ) Then set up the hide and show logic in server(). # in the server observeEvent(input$first_pet, { if (input$first_pet == &quot;other&quot;) { show(&quot;first_pet_other&quot;) } else { hide(&quot;first_pet_other&quot;) } }) 10.1.1 Groups Sometimes you need to hide and show a group of elements, depending on something else. You can wrap the grouped elements in a div tag with an id and hide and show that id. For example, it doesn’t make sense to show the questions above to someone who has never had a pet. Add a selectInput() before the previous two questions, and then wrap those questions in tags$div() with an id of “first_pet_grp” # replace in ui box( title = &quot;Questions&quot;, solidHeader = TRUE, selectInput(&quot;had_pet&quot;, &quot;Have you ever had a pet?&quot;, c(&quot;&quot;, &quot;Yes&quot;, &quot;No&quot;)), hidden(tags$div( id = &quot;first_pet_grp&quot;, selectInput(&quot;first_pet&quot;, &quot;What was your first pet?&quot;, c(&quot;&quot;, &quot;dog&quot;, &quot;cat&quot;, &quot;ferret&quot;, &quot;other&quot;)), textInput(&quot;first_pet_other&quot;, NULL, placeholder = &quot;Specify the other pet&quot;) )) ) Then add the following code to the server function to hide or show first_pet_grp depending on the value of had_pet. The server code above will take care of whether or not first_pet_other is visible. # add to server observeEvent(input$had_pet, { if (input$had_pet == &quot;Yes&quot;) { show(&quot;first_pet_grp&quot;) } else { hide(&quot;first_pet_grp&quot;) } }) Try to figure out what could go wrong if you didn’t wrap “first_pet” and “first_pet_other” in a group, and instead just hid or showed “first_pet” and “first_pet_other” depending on the value of has_pet? 10.1.2 Toggle Sometimes you need to change the visibility of an element when something happens, rather than specifically hide or show it. You can use toggle() to hide an element if it’s visible and show it if it’s hidden. Add an actionButton() to the sidebar menu (not inside the box) and give the box an id of “pet_box.” Any element that you might want to refer to in the code needs an id. # add to ui actionButton(&quot;toggle_pet_box&quot;, &quot;Toggle Pet Questions&quot;) Now, whenever you click the “toggle_pet_box” button, the contents of “pet_box” will toggle their visibility. # add to server observeEvent(input$toggle_pet_box, { toggle(&quot;pet_box&quot;) }) What would go wrong if you put the button inside the box? 10.2 Changing Styles You can use addClass(), removeClass(), and toggleClass() to change element classes. You usually want to do this with classes you’ve defined yourself. Add the following style to the www/custom.css file. .notice-me { color: red; text-decoration: underline; font-weight: 800; } And add this box to the ui: box(title = &quot;Notice&quot;, solidHeader = TRUE, p(id = &quot;notice_text&quot;, &quot;Please pay attention to this text.&quot;), actionButton(&quot;add_notice&quot;, &quot;Notice Me&quot;), actionButton(&quot;remove_notice&quot;, &quot;Ignore Me&quot;), actionButton(&quot;toggle_notice&quot;, &quot;Toggle Me&quot;) ) This code adds the class notice-me to the paragraph element “notice_text” whenever the “add_notive” button is pressed. observeEvent(input$add_notice, { addClass(&quot;notice_text&quot;, &quot;notice-me&quot;) }) Guess how you would use removeClass(), and toggleClass() with the buttons set up above. 10.2.1 Changing non-shiny elements Unfortunately, not all elements on the web page have an ID that can be altered by addClass() or removeClass(). For example, the skin of a shinydashboard app is determined by the css class of the body element. However, we can use runjs() to run any arbitrary JavaScript code. Add the following action button into the sidebar menu. actionButton(&quot;random_skin&quot;, &quot;Random Skin&quot;) The jQuery code below changes the skin of your app on a button press by removing all possible skin-color classes and adding a random one. observeEvent(input$random_skin, { skins &lt;- c(&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;, &quot;black&quot;) skin_color &lt;- sample(skins, 1) js &lt;- sprintf(&quot;$(&#39;body&#39;).removeClass(&#39;%s&#39;).addClass(&#39;skin-%s&#39;);&quot;, paste(paste0(&quot;skin-&quot;, skins), collapse = &quot; &quot;), skin_color) shinyjs::runjs(js) }) Changing the skin color with a button press isn’t something you’ll easily find documented in online materials. I figured it out through looking at how the underlying html changed when I changed the skin color in the app code. Hacks like this require lots of trial and error, but get easier the more you understand about html, css and JavaScript. 10.3 Changing input options The relevant options in a selectInput() or radioButton() may change depending on the values of other inputs. Sometimes you can accommodate this by creating multiple versions of a input and hiding or showing. Other times you may wish to update the input directly. Add the following box to the ui. box(title = &quot;Data&quot;, solidHeader = TRUE, width = 12, selectInput(&quot;dataset&quot;, &quot;Choose a dataset&quot;, c(&quot;mtcars&quot;, &quot;sleep&quot;)), checkboxGroupInput(&quot;columns&quot;, &quot;Select the columns to show&quot;, inline = TRUE), tableOutput(&quot;data_table&quot;) ) First, set up the code to display the correct data in the table. mydata &lt;- reactive({ if (input$dataset == &quot;mtcars&quot;) { mtcars } else { sleep } }) output$data_table &lt;- renderTable(mydata()) Now we need to set the options for “columns” depending on which “dataset” is selected. observe({ col_names &lt;- names(data()) debug_msg(col_names) updateCheckboxGroupInput(inputId = &quot;columns&quot;, choices = col_names, selected = col_names) }) Finally, we can add some code to select only the checked columns to display. observe({ full_data &lt;- if (input$dataset == &quot;mtcars&quot;) { mtcars } else { sleep } col_names &lt;- names(full_data) updateCheckboxGroupInput( inputId = &quot;columns&quot;, choices = col_names, selected = col_names, inline = TRUE ) }) Why do we have to get the dataset again instead of using the data from mydata()? Finally, alter the reactive function to only show the selected columns. mydata &lt;- reactive({ d &lt;- if (input$dataset == &quot;mtcars&quot;) { mtcars } else { sleep } d[input$columns] }) What happens when you unselect all the columns? How can you fix this? 10.4 Glossary term definition jquery 10.5 Exercises "]]
