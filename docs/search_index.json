[["inputs.html", "Chapter 3 Inputs 3.1 Input functions 3.2 Setting inputs programatically 3.3 Glossary", " Chapter 3 Inputs 3.1 Input functions Inputs are ways that users can communicate information to the Shiny app. Explore some different input types in the embedded app below before you read about how to set up each type. You can run this app locally with shinyintro::app(\"input_demo\") or view it in a separate tab with the showcase interface. Figure 3.1: Input Demo App 3.1.1 textInput textInput() creates a one-line box for short text input. demo_text &lt;- textInput(&quot;demo_text&quot;, label = &quot;Name&quot;, value = &quot;&quot;, width = &quot;100%&quot;, placeholder = &quot;Your Name&quot;) 3.1.2 textAreaInput textAreaInput() creates a multi-line box for longer text input. demo_textarea &lt;- textAreaInput(&quot;demo_textarea&quot;, label = &quot;Biography&quot;, value = &quot;&quot;, width = &quot;100%&quot;, rows = 5, placeholder = &quot;Tell us something interesting about you.&quot;) 3.1.3 selectInput selectInput() creates a drop-down menu. Set the first choice to \"\" to default to NA. If your choices are a named list or vector, the names are what is shown and the values are what is recorded. If the choices arenâ€™t named, the displayed and recorded values are the same. demo_select &lt;- selectInput(&quot;demo_select&quot;, label = &quot;Do you like Shiny?&quot;, choices = list(&quot;&quot;, &quot;Yes, I do&quot; = &quot;y&quot;, &quot;No, I don&#39;t&quot; = &quot;n&quot;), selected = NULL, width = &quot;100%&quot;) You can also make a select where users can choose multiple options. genders &lt;- list( # no blank needed &quot;Non-binary&quot; = &quot;nb&quot;, &quot;Male&quot; = &quot;m&quot;, &quot;Female&quot; = &quot;f&quot;, &quot;Agender&quot; = &quot;a&quot;, &quot;Gender Fluid&quot; = &quot;gf&quot; ) demo_select_multi &lt;- selectInput(&quot;demo_select2&quot;, label = &quot;Gender (select all that apply)&quot;, choices = genders, selected = NULL, multiple = TRUE, selectize = FALSE, size = 5) 3.1.4 checkboxGroupInput However, this interface almost always looks better with a checkbox group. demo_cbgi &lt;- checkboxGroupInput(&quot;demo_cbgi&quot;, label = &quot;Gender (select all that apply)&quot;, choices = genders) 3.1.5 checkboxInput You can also make a single checkbox. The value is TRUE when checked and FALSE when not. demo_cb &lt;- checkboxInput(&quot;demo_cb&quot;, label = &quot;I love R&quot;, value = TRUE) Sliders allow you to choose numbers between a minimum and maximum. demo_slider &lt;- sliderInput(&quot;demo_slider&quot;, label = &quot;Age&quot;, min = 0, max = 100, value = 0, step = 1, width = &quot;100%&quot;) 3.2 Setting inputs programatically Sometimes you need to change the value of an input with code, such as when resetting a questionnaire or in response to an answer on another item. The following code resets all of the inputs above. updateTextInput(session, &quot;demo_text&quot;, value = &quot;&quot;) updateTextAreaInput(session, &quot;demo_textarea&quot;, value = &quot;&quot;) updateSelectInput(session, &quot;demo_select&quot;, selected = &quot;&quot;) updateCheckboxGroupInput(session, &quot;demo_cbgi&quot;, selected = character(0)) updateCheckboxInput(session, &quot;demo_cb&quot;, value = TRUE) updateSliderInput(session, &quot;demo_slider&quot;, value = 0) Note that select inputs and checkbox groups use the argument selected and not value. If you want to set all the values in a checkbox group to unchecked, set selected = character(0). 3.3 Glossary term definition list A container data type that allows items with different data types to be grouped together. vector A type of data structure that is basically a list of things like T/F values, numbers, or strings. "]]
