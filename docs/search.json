[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"Shiny lets make web applications anything can code R. example, can share data analysis dynamic way people use R, collect visualize data, even make data aRt.wealth material available internet help get started Shiny, can difficult see everything fits together. class take predominantly live coding approach, rather lecture-approach, can code along instructor deal inevitable bugs roadblocks together.class teach basics Shiny app programming, giving skills form basis almost app want build. end class, created custom app collects saves data, allows users dynamically visualize data, produces downloadable reports.","code":""},{"path":"index.html","id":"installing-shinyintro","chapter":"Overview","heading":"0.1 Installing shinyintro","text":"install class package, provide copy shiny apps use demos basic template, paste following code console RStudio. See Appendix help installing R RStudio.class package lets access book run demo apps offline.can also clone demo apps.","code":"\n# you may have to install devtools first with \n# install.packages(\"devtools\")\n\ndevtools::install_github(\"debruine/shinyintro\")\nshinyintro::book()\nshinyintro::app(\"first_demo\")\nshinyintro::clone(\"basic_template\", \"myapps/newapp\")"},{"path":"index.html","id":"example-apps","chapter":"Overview","heading":"0.2 Example Apps","text":"following diverse examples Shiny apps instructor made.Word Cloud Create word cloud text customize appearance. Created live-coding event Hack Data Beautiful.Faux Simulate data specified factorial design.Plot Demo Simulate data 2×2 factorial design visualize 6 different plot styles.Simulating LMEM companion Understanding mixed effects models data simulation (DeBruine & Barr, AMPPS 2021)Scienceverse ambitious (-progress) app creating machine-readable descriptions studies human-readable summaries.","code":""},{"path":"index.html","id":"computing","chapter":"Overview","heading":"0.2.1 Computing","text":"participate hands-exercises, strongly encouraged use computer recent version R installed. Participants also encouraged download install RStudio, front-end R makes easier work . software free available Windows, Mac, Linux platforms.","code":""},{"path":"index.html","id":"what-experience-do-i-need","chapter":"Overview","heading":"0.2.2 What experience do I need?","text":"need basic familiarity R, including data import, data processing, visualization, functions control structures (e.g., /else). Instruction done using RStudio. familiarity ggplot2 dplyr useful. definitely need expert coder, following code challenging understand.want brush R (especially tidyverse), also gain familiarity instructor's teaching style, book Applied Data Skills provides good overview.","code":"\nlibrary(ggplot2)\n\npets <- read.csv(\"pets.csv\")\n\ndv <- sample(c(\"score\", \"weight\"), 1)\n\nif (dv == \"score\") {\n  g <- ggplot(pets, aes(pet, score, fill = country))\n} else if (dv == \"weight\") {\n  g <- ggplot(pets, aes(pet, weight, fill = country))\n}\n\ng + geom_violin(alpha = 0.5)"},{"path":"index.html","id":"further-resources","chapter":"Overview","heading":"0.3 Further Resources","text":"lot great resources online reinforce continue learning Shiny. advise going back learning materials periodically things make sense first (second third...) time around often click experience.Mastering ShinyRStudio Shiny TutorialsAwesome Shiny Extensions","code":""},{"path":"first-app.html","id":"first-app","chapter":"1 Your First Shiny App","heading":"1 Your First Shiny App","text":"","code":""},{"path":"first-app.html","id":"the-demo-app","chapter":"1 Your First Shiny App","heading":"1.1 The Demo App","text":"start, walk basics setting shiny app, starting example built RStudio. explain yet shiny apps structured; goal just get something running, give familiarity layout fairly simple app.","code":""},{"path":"first-app.html","id":"set-up-the-demo-app","chapter":"1 Your First Shiny App","heading":"1.1.1 Set Up the Demo App","text":"\nFigure 1.1: Creating demo app.\nFile menu, choose New Project.... see popup window like one . Choose New Directory.File menu, choose New Project.... see popup window like one . Choose New Directory.Choose Shiny Web Application project type.Choose Shiny Web Application project type.like put apps directory, matter save .like put apps directory, matter save .RStudio interface look like now.\nFigure 1.2: RStudio interface built-demo app loaded.\nusing RStudio source code look like , replace code :Click Run App top right corner source pane. app open new window. Play slider watch histogram change.\nFigure 1.3: Demo application interface\ncan also open app web browser clicking Open Browser.","code":"\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n   \n   # Application title\n   titlePanel(\"Old Faithful Geyser Data\"),\n   \n   # Sidebar with a slider input for number of bins \n   sidebarLayout(\n      sidebarPanel(\n         sliderInput(\"bins\",\n                     \"Number of bins:\",\n                     min = 1,\n                     max = 50,\n                     value = 30)\n      ),\n      \n      # Show a plot of the generated distribution\n      mainPanel(\n         plotOutput(\"distPlot\")\n      )\n   )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n   \n   output$distPlot <- renderPlot({\n      # generate bins based on input$bins from ui.R\n      x    <- faithful[, 2] \n      bins <- seq(min(x), max(x), length.out = input$bins + 1)\n      \n      # draw the histogram with the specified number of bins\n      hist(x, breaks = bins, col = 'darkgray', border = 'white')\n   })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"},{"path":"first-app.html","id":"modify-the-demo-app","chapter":"1 Your First Shiny App","heading":"1.1.2 Modify the Demo App","text":"Now going make series changes demo app .can close app closing window browser tab running clicking red stop sign console tab, leave running edit code. multiple screens, can useful app open one screen code another.Find application title. first argument function titlePanel(). Change title \"First App\". Make sure title inside quotes whole quoted string inside parentheses. Save file (cmd-S File > Save).\nFigure 1.4: App changed title.\nClick Run App (Reload App closed app window) source pane. saved changes, prompt . Check app title changed.Now change input. Find function sliderInput() (line 21). first argument name can use code find value input, change just yet. second argument text displays slider. Change something else re-run app.See can figure next three arguments sliderInput() . Change different integers, re-run app see changed.arguments function sidebarPanel() just list things want display sidebar. add explanatory text paragraph sliderInput(), just use paragraph function p().\nFigure 1.5: Sidebar added paragraph.\nsidebar shows left window wide enough, moves top screen narrow.like , can move text sidebar top page, just title. Try re-run app.See can move text layout page causes errors.also keen grey plot. can change plot colour inside hist()lot ways represent colour R. easiest three :hexadecimal colours (e.g., \"#0066CC\")rgb hsl functions (e.g., rgb(0, .4, .8))colour names (type colours() console)color \"steelblue3\" pretty close shiny interface default colour, feel free choose whatever like.prefer ggplots, make plot geom_histogram() instead hist() (great function really quick plots, visually appealing). Since need several functions ggplot2 package, need load package top script, just shiny package loaded:can replace code renderPlot() code .can set fill colour whatever colours like, change theme_minimal() one built-ggplot themes.even plotting ? Type ?faithful console pane see waiting column represents (faithful built-demo dataset). Change label x-axis something sensible.","code":"\nsliderInput(\"bins\",\n            \"Number of bins:\",\n            min = 0,\n            max = 50,\n            value = 30)\nsidebarPanel(\n   p(\"I am explaining this perfectly\"),\n   sliderInput(\"bins\",\n               \"Choose the best bin number:\",\n               min = 10,\n               max = 40,\n               value = 25)\n)# Application title\ntitlePanel(\"My First App\"),\n\np(\"I am explaining this perfectly\"),\n\n# Sidebar with a slider input for number of bins\nsidebarLayout(...)\n# draw the histogram with the specified number of bins\nhist(x, breaks = bins, col = 'steelblue3', border = 'grey30')\nlibrary(shiny)\nlibrary(ggplot2)\noutput$distPlot <- renderPlot({\n  # create plot\n  ggplot(faithful, aes(waiting)) +\n    geom_histogram(bins = input$bins,\n                   fill = \"steelblue3\",\n                   colour = \"grey30\") +\n    xlab(\"What are we even plotting here?\") +\n    theme_minimal()\n})"},{"path":"first-app.html","id":"add-new-things","chapter":"1 Your First Shiny App","heading":"1.1.3 Add New Things","text":"faithful dataset includes two columns: eruptions waiting. plotting waiting variable, wanted plot eruptions variable instead?Try plotting eruption time (eruptions) instead waiting time. just change one word ggplot() update x-axis label.can add another input widget let user switch plotting eruption time wait time. learn different input options Section ??. need toggle two options, can use either radio buttons select box. Radio buttons probably best options user want see time decide.Add following code first argument sidebarPanel(), just takes list different widgets. radioButtons() widget using. set four arguments:inputId: unique identifier use later code find value widgetlabel: text display userchoices: list choices format c(\"label1\" = \"value1\", \"label2\" = \"value2\", ...)selected: value default choiceFor choices, label gets shown user value gets used code (can , often want user label descriptive).Save re-run app.\nFigure 1.6: radioButton widget sliderInput widget.\nradio button interface now. can click options switch button, anything plot yet. need edit plot-generating code make happen.First, need change x-axis label depending graphing. use /else statement set variable xlabel one thing input$display_var equivalent \"eruptions\", something else equivalent \"waiting\". Put code beginning code block renderPlot() (line output$distPlot <- renderPlot({).double-equal-signs == means \"equivalent check two things ; use one equal sign, set variable left value right.edit ggplot() use new label plot correct column. variable input$display_var gives user-input value widget called \"display_var\".::: {.warning data-latex=\"\"}\nNotice code aes(waiting) changed aes(.data[[input\\(display_var]])<\/code>. `input\\)display_varis <class='glossary' target='_blank' title='piece text inside quotes.' href='https://psyteachr.github.io/glossary/s#string'>string<\/>, select .dataplaceholder (refers thefaithful` data table) using double brackets.\n:::]]) %>%\nsummarise_if(.numeric, input$stat, na.rm = TRUE)\n})output\\(caption <- renderText({  sprintf(\"%ss %s\", toupper(input\\)stat), input$group)\n})\n}","code":" radioButtons(inputId = \"display_var\",\n              label = \"Which variable to display\",\n              choices = c(\"Waiting time to next eruption\" = \"waiting\",\n                          \"Eruption time\" = \"eruptions\"),\n              selected = \"waiting\"\n ),\n# set x-axis label depending on the value of display_var\nif (input$display_var == \"eruptions\") {\n  xlabel <- \"Eruption Time (in minutes)\"\n} else if (input$display_var == \"waiting\") {\n  xlabel <- \"Waiting Time to Next Eruption (in minutes)\"\n}\n# create plot\nggplot(faithful, aes(.data[[input$display_var]])) +\n  geom_histogram(bins = input$bins,\n                 fill = \"steelblue3\",\n                 colour = \"grey30\") +\n  xlab(xlabel) +\n  theme_minimal()\n<\/div>\n\n\n\n### reactive {-}\n\nUse <code><span class='fu'>reactive<\/span>()<\/code> to update the output table and caption whenever group or stat change. Ignore the update button.\n\n\n<div class='webex-solution'><button>Solution<\/button>\n\n\n```r\nserver <- function(input, output, session) {\n  data <- reactive({\n    msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n  })\n  output$table <- renderTable(data())\n  \n  caption <- reactive({\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n  output$caption <- renderText(caption())\n} "},{"path":"first-app.html","id":"observeevent","chapter":"1 Your First Shiny App","heading":"observeEvent","text":"Use observeEvent() update output table appropriate summary table update caption appropriate caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  observeEvent(input$update, {\n    data <- msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n    output$table <- renderTable(data)\n    \n    caption <-\n      sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n    output$caption <- renderText(caption)\n  })\n} "},{"path":"first-app.html","id":"reactiveval","chapter":"1 Your First Shiny App","heading":"reactiveVal","text":"Use reactiveVal() update output table caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  data <- reactiveVal()\n  caption <- reactiveVal()\n  \n  observeEvent(input$update, {\n    newdata <- msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n    data(newdata)\n    \n    # this is an alternative way to set reactiveVal\n    # by piping the value into the function\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group) %>%\n      caption()\n  })\n  \n  output$table <- renderTable(data())\n  output$caption <- renderText(caption())\n} "},{"path":"first-app.html","id":"reactivevalues","chapter":"1 Your First Shiny App","heading":"reactiveValues","text":"Use reactiveValues() update output table caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  v <- reactiveValues()\n  \n  observeEvent(input$update, {\n    v$data <- msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n    \n    v$caption <-\n      sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n  \n  output$table <- renderTable(v$data)\n  output$caption <- renderText(v$caption)\n} "},{"path":"first-app.html","id":"eventreactive","chapter":"1 Your First Shiny App","heading":"eventReactive","text":"Use eventReactive() update output table caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  data <- eventReactive(input$update, {\n    msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n  })\n  output$table <- renderTable(data())\n  \n  caption <- eventReactive(input$update, {\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n  output$caption <- renderText(caption())\n} "},{"path":"first-app.html","id":"your-app-reactive","chapter":"1 Your First Shiny App","heading":"1.2 Your App","text":"Add reactive functions custom app. Think patterns best app. example, need update data table inputs change, use one output, best use reactive() create function data callit render functions output, rather creating data table render function.","code":""}]
