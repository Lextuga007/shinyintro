[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"Shiny lets make web applications anything can code R. example, can share data analysis dynamic way people use R, collect visualize data, even make data aRt.wealth material available internet help get started Shiny, can difficult see everything fits together. class take predominantly live coding approach, rather lecture-approach, can code along instructor deal inevitable bugs roadblocks together.class teach basics Shiny app programming, giving skills form basis almost app want build. end class, created custom app collects saves data, allows users dynamically visualize data, produces downloadable reports.","code":""},{"path":"index.html","id":"installing-shinyintro","chapter":"Overview","heading":"0.1 Installing shinyintro","text":"install class package, provide copy shiny apps use demos basic template, paste following code console RStudio. See Appendix help installing R RStudio.class package lets access book run demo apps offline.can also clone demo apps.","code":"\n# you may have to install devtools first with \n# install.packages(\"devtools\")\n\ndevtools::install_github(\"debruine/shinyintro\")\nshinyintro::book()\nshinyintro::app(\"first_demo\")\nshinyintro::clone(\"basic_template\", \"myapps/newapp\")"},{"path":"index.html","id":"example-apps","chapter":"Overview","heading":"0.2 Example Apps","text":"following diverse examples Shiny apps instructor made.Word Cloud Create word cloud text customize appearance. Created live-coding event Hack Data Beautiful.Faux Simulate data specified factorial design.Plot Demo Simulate data 2×2 factorial design visualize 6 different plot styles.Simulating LMEM companion Understanding mixed effects models data simulation (DeBruine & Barr, AMPPS 2021)Scienceverse ambitious (-progress) app creating machine-readable descriptions studies human-readable summaries.","code":""},{"path":"index.html","id":"computing","chapter":"Overview","heading":"0.2.1 Computing","text":"participate hands-exercises, strongly encouraged use computer recent version R installed. Participants also encouraged download install RStudio, front-end R makes easier work . software free available Windows, Mac, Linux platforms.","code":""},{"path":"index.html","id":"what-experience-do-i-need","chapter":"Overview","heading":"0.2.2 What experience do I need?","text":"need basic familiarity R, including data import, data processing, visualization, functions control structures (e.g., /else). Instruction done using RStudio. familiarity ggplot2 dplyr useful. definitely need expert coder, following code challenging understand.want brush R (especially tidyverse), also gain familiarity instructor's teaching style, first seven chapters Data Skills Reproducible Science provide good overview.","code":"\nlibrary(ggplot2)\n\npets <- read.csv(\"pets.csv\")\n\ndv <- sample(c(\"score\", \"weight\"), 1)\n\nif (dv == \"score\") {\n  g <- ggplot(pets, aes(pet, score, fill = country))\n} else if (dv == \"weight\") {\n  g <- ggplot(pets, aes(pet, weight, fill = country))\n}\n\ng + geom_violin(alpha = 0.5)"},{"path":"index.html","id":"conventions","chapter":"Overview","heading":"0.3 Conventions","text":"book use following conventions:File paths: www/style.cssR Packages: shinydashboardFunctions: observeEvent(input$button, {})Arguments: widthStrings: \"Lisa\"Numbers: 100Logical values: TRUEOther code: x <- list(= \"Alligator\", b = \"Loki\")Glossary items: shinyInternal links: Section 1External links: Mastering ShinyMenu/interface options: New File...Informational asides.Notes warn something.Notes things cause serious errors.Try .","code":"\n# code chunks\nshinyApp(ui = ui, server = server)"},{"path":"index.html","id":"further-resources","chapter":"Overview","heading":"0.4 Further Resources","text":"lot great resources online reinforce continue learning Shiny. advise going back learning materials periodically things make sense first (second third...) time around often click experience.Mastering ShinyRStudio Shiny TutorialsAwesome Shiny Extensions","code":""},{"path":"first-app.html","id":"first-app","chapter":"1 Your First Shiny App","heading":"1 Your First Shiny App","text":"","code":""},{"path":"first-app.html","id":"the-demo-app","chapter":"1 Your First Shiny App","heading":"1.1 The Demo App","text":"start, walk basics setting shiny app, starting example built RStudio. explain yet shiny apps structured; goal just get something running, give familiarity layout fairly simple app.","code":""},{"path":"first-app.html","id":"set-up-the-demo-app","chapter":"1 Your First Shiny App","heading":"1.1.1 Set Up the Demo App","text":"\nFigure 1.1: Creating demo app.\nFile menu, choose New Project.... see popup window like one . Choose New Directory.File menu, choose New Project.... see popup window like one . Choose New Directory.Choose Shiny Web Application project type.Choose Shiny Web Application project type.like put apps directory, matter save .like put apps directory, matter save .RStudio interface look like now.\nFigure 1.2: RStudio interface built-demo app loaded.\nusing RStudio source code look like , replace code :Click Run App top right corner source pane. app open new window. Play slider watch histogram change.\nFigure 1.3: Demo application interface\ncan also open app web browser clicking Open Browser.","code":"\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n   \n   # Application title\n   titlePanel(\"Old Faithful Geyser Data\"),\n   \n   # Sidebar with a slider input for number of bins \n   sidebarLayout(\n      sidebarPanel(\n         sliderInput(\"bins\",\n                     \"Number of bins:\",\n                     min = 1,\n                     max = 50,\n                     value = 30)\n      ),\n      \n      # Show a plot of the generated distribution\n      mainPanel(\n         plotOutput(\"distPlot\")\n      )\n   )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n   \n   output$distPlot <- renderPlot({\n      # generate bins based on input$bins from ui.R\n      x    <- faithful[, 2] \n      bins <- seq(min(x), max(x), length.out = input$bins + 1)\n      \n      # draw the histogram with the specified number of bins\n      hist(x, breaks = bins, col = 'darkgray', border = 'white')\n   })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"},{"path":"first-app.html","id":"modify-the-demo-app","chapter":"1 Your First Shiny App","heading":"1.1.2 Modify the Demo App","text":"Now going make series changes demo app .can close app closing window browser tab running clicking red stop sign console tab, leave running edit code. multiple screens, can useful app open one screen code another.Find application title. first argument function titlePanel(). Change title \"First App\". Make sure title inside quotes whole quoted string inside parentheses. Save file (cmd-S File > Save).\nFigure 1.4: App changed title.\nClick Run App (Reload App closed app window) source pane. saved changes, prompt . Check app title changed.Now change input. Find function sliderInput() (line 21). first argument name can use code find value input, change just yet. second argument text displays slider. Change something else re-run app.See can figure next three arguments sliderInput() . Change different integers, re-run app see changed.arguments function sidebarPanel() just list things want display sidebar. add explanatory text paragraph sliderInput(), just use paragraph function p().\nFigure 1.5: Sidebar added paragraph.\nsidebar shows left window wide enough, moves top screen narrow.like , can move text sidebar top page, just title. Try re-run app.See can move text layout page causes errors.also keen grey plot. can change plot colour inside hist()lot ways represent colour R. easiest three :hexadecimal colours (e.g., \"#0066CC\")rgb hsl functions (e.g., rgb(0, .4, .8))colour names (type colours() console)color \"steelblue3\" pretty close shiny interface default colour, feel free choose whatever like.prefer ggplots, make plot geom_histogram() instead hist() (great function really quick plots, visually appealing). Since need several functions ggplot2 package, need load package top script, just shiny package loaded:can replace code renderPlot() code .can set fill colour whatever colours like, change theme_minimal() one built-ggplot themes.even plotting ? Type ?faithful console pane see waiting column represents (faithful built-demo dataset). Change label x-axis something sensible.","code":"\nsliderInput(\"bins\",\n            \"Number of bins:\",\n            min = 0,\n            max = 50,\n            value = 30)\nsidebarPanel(\n   p(\"I am explaining this perfectly\"),\n   sliderInput(\"bins\",\n               \"Choose the best bin number:\",\n               min = 10,\n               max = 40,\n               value = 25)\n)# Application title\ntitlePanel(\"My First App\"),\n\np(\"I am explaining this perfectly\"),\n\n# Sidebar with a slider input for number of bins\nsidebarLayout(...)\n# draw the histogram with the specified number of bins\nhist(x, breaks = bins, col = 'steelblue3', border = 'grey30')\nlibrary(shiny)\nlibrary(ggplot2)\noutput$distPlot <- renderPlot({\n  # create plot\n  ggplot(faithful, aes(waiting)) +\n    geom_histogram(bins = input$bins,\n                   fill = \"steelblue3\",\n                   colour = \"grey30\") +\n    xlab(\"What are we even plotting here?\") +\n    theme_minimal()\n})"},{"path":"first-app.html","id":"add-new-things","chapter":"1 Your First Shiny App","heading":"1.1.3 Add New Things","text":"faithful dataset includes two columns: eruptions waiting. plotting waiting variable, wanted plot eruptions variable instead?Try plotting eruption time (eruptions) instead waiting time. just change one word ggplot() update x-axis label.can add another input widget let user switch plotting eruption time wait time. learn different input options Section 3. need toggle two options, can use either radio buttons select box. Radio buttons probably best options user want see time decide.Add following code first argument sidebarPanel(), just takes list different widgets. radioButtons() widget using. set four arguments:inputId: unique identifier use later code find value widgetlabel: text display userchoices: list choices format c(\"label1\" = \"value1\", \"label2\" = \"value2\", ...)selected: value default choiceFor choices, label gets shown user value gets used code (can , often want user label descriptive).Save re-run app.\nFigure 1.6: radioButton widget sliderInput widget.\nradio button interface now. can click options switch button, anything plot yet. need edit plot-generating code make happen.First, need change x-axis label depending graphing. use /else statement set variable xlabel one thing input$display_var equivalent \"eruptions\", something else equivalent \"waiting\". Put code beginning code block renderPlot() (line output$distPlot <- renderPlot({).double-equal-signs == means \"equivalent check two things ; use one equal sign, set variable left value right.edit ggplot() use new label plot correct column. variable input$display_var gives user-input value widget called \"display_var\".Notice code aes(waiting) changed aes(.data[[input$display_var]]). input$display_var string, select .data placeholder (refers faithful data table) using double brackets.Re-run app see can change data x-axis label new widget.\nFigure 1.7: First Demo App. can also access app shinyintro::app(\"first_demo\")view separate tab showcase interface.\n","code":" radioButtons(inputId = \"display_var\",\n              label = \"Which variable to display\",\n              choices = c(\"Waiting time to next eruption\" = \"waiting\",\n                          \"Eruption time\" = \"eruptions\"),\n              selected = \"waiting\"\n ),\n# set x-axis label depending on the value of display_var\nif (input$display_var == \"eruptions\") {\n  xlabel <- \"Eruption Time (in minutes)\"\n} else if (input$display_var == \"waiting\") {\n  xlabel <- \"Waiting Time to Next Eruption (in minutes)\"\n}\n# create plot\nggplot(faithful, aes(.data[[input$display_var]])) +\n  geom_histogram(bins = input$bins,\n                 fill = \"steelblue3\",\n                 colour = \"grey30\") +\n  xlab(xlabel) +\n  theme_minimal()"},{"path":"first-app.html","id":"app-structure","chapter":"1 Your First Shiny App","heading":"1.2 App Structure","text":"Now made modified first working app, time learn bit shiny app structured.shiny app made two main parts, UI, defines user interface looks like, server function, defines interface behaves. function shinyApp() puts two together run application web browser.Create new app called \"basic_demo\" replace text app.R code . able run app see just blank page.","code":"\n# Setup ----\nlibrary(shiny)\n\n# Define UI ----\nui <- fluidPage()\n\n# Define server logic ----\nserver <- function(input, output, session) {}\n\n# Run the application ----\nshinyApp(ui = ui, server = server)"},{"path":"first-app.html","id":"ui","chapter":"1 Your First Shiny App","heading":"1.2.1 UI","text":"UI created one ui-building ****Page() functions, fluidPage(), fixedPage(), fillPage() dashboardPage() (learn Section 2). ui-building functions set parts webpage, created shiny functions list inside page function, separated commas.","code":""},{"path":"first-app.html","id":"tags","chapter":"1 Your First Shiny App","heading":"1.2.2 Tags","text":"example, code displays:title panel text \"Basic Demo\"level-two header text \"favourite things\"unordered list containing several list itemsa paragraph text \"basic demo.\"image shinyintro logo width height 100 pixelsMany functions used create parts website HTML tags, ways mark beginning end different types text. HTML tags available shiny using one tags() sub-functions, common tags, like p() h1()-h6()also version can omit tags$ part. can see list tags available Shiny tag glossaryAdd code basic_demo app replace favourite things . Make list ordered list (instead unordered) change image size.","code":"\nui <- fluidPage(\n  titlePanel(\"Basic Demo\"),\n  h2(\"My favourite things\"),\n  tags$ul(tags$li(\"Coding\"),\n          tags$li(\"Cycling\"),\n          tags$li(\"Cooking\")),\n  p(\"This is a very basic demo.\"),\n  tags$img(\n    src = \"https://debruine.github.io/shinyintro/images/logos/shinyintro.png\",\n    width = \"100px\",\n    height = \"100px\"\n  )\n)"},{"path":"first-app.html","id":"page-layout","chapter":"1 Your First Shiny App","heading":"1.2.3 Page Layout","text":"usually want apps complex layout just element stacked previous one. code wraps elements title panel inside flowLayout().Replace ui code basic_demo app code run web browser. happens change width web browser? Change flowLayout() verticalLayout() splitLayout() see changes.can use sidebarLayout() arrange elements sidebarPanel() mainPanel(). browser width narrow, sidebar display top main panel.","code":"\nui <- fluidPage(titlePanel(\"Basic Demo\"),\n                flowLayout(\n                  h2(\"My favourite things\"),\n                  tags$ul(tags$li(\"Coding\"),\n                          tags$li(\"Cycling\"),\n                          tags$li(\"Cooking\")),\n                  p(\"This is a very basic demo.\"),\n                  tags$img(\n                    src = \"https://debruine.github.io/shinyintro/images/logos/shinyintro.png\",\n                    width = \"100px\",\n                    height = \"100px\"\n                  )\n                ))\nui <- fluidPage(titlePanel(\"Basic Demo\"),\n                sidebarLayout(sidebarPanel(\n                  h2(\"My favourite things\"),\n                  tags$ul(tags$li(\"Coding\"),\n                          tags$li(\"Cycling\"),\n                          tags$li(\"Cooking\"))\n                ),\n                mainPanel(\n                  p(\"This is a very basic demo.\"),\n                  tags$img(\n                    src = \"https://debruine.github.io/shinyintro/images/logos/shinyintro.png\",\n                    width = \"100px\",\n                    height = \"100px\"\n                  )\n                )))"},{"path":"first-app.html","id":"dynamic-elements","chapter":"1 Your First Shiny App","heading":"1.3 Dynamic Elements","text":"far, just put static elements UI. makes Shiny apps work dynamic elements like inputs, outputs, action buttons.","code":""},{"path":"first-app.html","id":"inputs-intro","chapter":"1 Your First Shiny App","heading":"1.3.1 Inputs","text":"Inputs ways users app communicate app, like drop-menus checkboxes. go different types inputs Section 3. turn list favourite things group checkboxesMost inputs structured like , inputId, needs unique string used ID input output app, label contains question, list choices parameters determine type values input record.might noticed sliderInput() demo app use argument names inputId label. inputs need first two arguments, almost everyone omits names.","code":"\ncheckboxGroupInput(\n  inputId = \"fav_things\",\n  label = \"What are your favourite things?\",\n  choices = c(\"Coding\", \"Cycling\", \"Cooking\")\n)"},{"path":"first-app.html","id":"outputs-intro","chapter":"1 Your First Shiny App","heading":"1.3.2 Outputs","text":"Outputs placeholders things server() create. different output functions different types outputs, like text, plots, tables. go different types outputs detail Section 4. , make placeholder text display counting number favourite things.outputs structured like , just unique outputId (argument name also usually omitted).","code":"\ntextOutput(outputId = \"n_fav_things\")"},{"path":"first-app.html","id":"action-buttons","chapter":"1 Your First Shiny App","heading":"1.3.3 Action buttons","text":"Action buttons special type input register button clicks. make action button users can click selected favourite things.Action buttons require unique inputId label button text. can also add icon. Choose free icon fontawesome.Put input, output, action button ui run . see input checkboxes selectable button clickable, nothing displayed text output. need code server() handle .","code":"\nactionButton(inputId = \"count_fav_things\",\n             label = \"Count\",\n             icon = icon(\"calculator\"))\nui <- fluidPage(titlePanel(\"Basic Demo\"),\n                sidebarLayout(\n                  sidebarPanel(\n                    checkboxGroupInput(\n                      inputId = \"fav_things\",\n                      label = \"What are your favourite things?\",\n                      choices = c(\"Coding\", \"Cycling\", \"Cooking\")\n                    ),\n                    actionButton(\n                      inputId = \"count_fav_things\",\n                      label = \"Count\",\n                      icon = icon(\"calculator\")\n                    )\n                  ),\n                  mainPanel(textOutput(outputId = \"n_fav_things\"))\n                ))"},{"path":"first-app.html","id":"first-reactive","chapter":"1 Your First Shiny App","heading":"1.4 Reactive functions","text":"Reactive functions functions run certain types inputs change. Inside server(), object input named list values inputs. example, want know items select input named \"fav_things\" selected, use input$fav_things., just want count many items checked. want whenever button \"count_fav_things\" clicked, can use reactive function observeEvent() . Every time value input$count_fav_things changes (happens clicked), run code inside curly brackets {}. code run input$count_fav_things changes, inputs inside function change.Now want display text output \"n_fav_things\". need use render function paired output function. Since \"n_fav_things\" made textOutput(), fill renderText().always coding, many ways accomplish thing. methods different pros cons learn Section 5. another (better) pattern .pattern uses reactive() create new function called count_text(), updates value returns whenever inputs inside reactive function change. use isolate() prevent count_text() changing users click checkboxes.Whenever returned value count_text() changes, triggers update \"n_fav_things\" output.Compare app behaviour first pattern versus second. different? happens remove isolate() around input$fav_things?","code":"\nserver <- function(input, output) {\n  # count favourite things\n  observeEvent(input$count_fav_things, {\n    n <- length(input$fav_things)\n    count_text <- sprintf(\"You have %d favourite things\", n)\n  })\n}\nserver <- function(input, output) {\n  # count favourite things\n  observeEvent(input$count_fav_things, {\n    n <- length(input$fav_things)\n    count_text <- sprintf(\"You have %d favourite things\", n)\n    output$n_fav_things <- renderText(count_text)\n  })\n}\nserver <- function(input, output) {\n  # update count_text on fav_things\n  count_text <- reactive({\n    input$count_fav_things # just here to trigger the reactive\n    fav_things <-\n      isolate(input$fav_things) # don't trigger on checks\n    n <- length(fav_things)\n    sprintf(\"You have %d favourite things\", n)\n  })\n  \n  # display count_text when it updates\n  output$n_fav_things <- renderText(count_text())\n}"},{"path":"first-app.html","id":"resources-first-app","chapter":"1 Your First Shiny App","heading":"1.5 Further Resources","text":"Mastering Shiny: Chapters 1-3RStudio Shiny Tutorials: Videos 1-6Application layout guide","code":""},{"path":"first-app.html","id":"exercises-first-app","chapter":"1 Your First Shiny App","heading":"1.6 Exercises","text":"","code":""},{"path":"first-app.html","id":"addition-app---ui","chapter":"1 Your First Shiny App","heading":"Addition App - UI","text":"Create UI following app. Use numericInput() create inputs.\nFigure 1.8: Add Demo App. can also access app shinyintro::app(\"add_demo\")view separate tab showcase interface.\n","code":"\nui <- fluidPage(titlePanel(\"Addition Demo\"),\n                sidebarLayout(\n                  sidebarPanel(\n                    numericInput(\"n1\", \"First number\", 0),\n                    numericInput(\"n2\", \"Second number\", 0),\n                    actionButton(\"add\", \"Add Numbers\")\n                  ),\n                  mainPanel(textOutput(outputId = \"n1_plus_n2\"))\n                ))"},{"path":"first-app.html","id":"observeevent","chapter":"1 Your First Shiny App","heading":"observeEvent","text":"Use observeEvent() write server function displays \"n1 + n2 = sum\" click action button.","code":"\nserver <- function(input, output) {\n  # add numbers\n  observeEvent(input$add, {\n    sum <- input$n1 + input$n2\n    add_text <- sprintf(\"%d + %d = %d\", input$n1, input$n2, sum)\n    output$n1_plus_n2 <- renderText(add_text)\n  })\n}"},{"path":"first-app.html","id":"reactive","chapter":"1 Your First Shiny App","heading":"reactive","text":"Use reactive() accomplish behaviour.","code":"\nserver <- function(input, output) {\n  add_text <- reactive({\n    input$add # triggers reactive\n    n1 <- isolate(input$n1)\n    n2 <- isolate(input$n2)\n    sprintf(\"%d + %d = %d\", n1, n2, n1 + n2)\n  })\n  \n  output$n1_plus_n2 <- renderText(add_text())\n}"},{"path":"shinydashboard.html","id":"shinydashboard","chapter":"2 ShinyDashboard","heading":"2 ShinyDashboard","text":"Shinydashboard R package provides functions upgrade appearance function Shiny apps.","code":""},{"path":"shinydashboard.html","id":"basic-template-for-shinydashboard-projects","chapter":"2 ShinyDashboard","heading":"2.1 Basic template for shinydashboard projects","text":"shinyintro package provides basic template shinydashboard project.\nFigure 2.1: Basic Template.App can also access app shinyintro::app(\"basic_template\")view separate tab.\ncan start new app using template code shinyintro::clone(\"basic_template\", \"myapp\"). create new directory called myapp working directory open app.R file RStudio.directory contains:app.R: file define ui serverDESCRIPTION: file contains structured info appREADME.md: file can contain information wantscripts: directory can contain external R code can source app.R filewww: directory contains helper files like images, CSS, JavaScript","code":""},{"path":"shinydashboard.html","id":"dashboard-structure","chapter":"2 ShinyDashboard","heading":"2.2 Dashboard Structure","text":"Notice ui created dashboardPage() now. needs set little differently fluidPage(). main parts dashboard page header, sidebar, body.can also change default skin colour. Possible skin colours : \"red\", \"yellow\" (looks orange ), \"green\", \"blue\", \"purple\", \"black\".","code":"\ndashboardPage(skin = \"purple\",\n              dashboardHeader(),\n              dashboardSidebar(),\n              dashboardBody())"},{"path":"shinydashboard.html","id":"dashboardheader","chapter":"2 ShinyDashboard","heading":"2.2.1 dashboardHeader","text":"can add title header, change title width.can also include message, notification, task menus header. using class, can learn shinydashboard site.want use header, include dashboardHeader(disable = TRUE) inside dashboardPage().","code":"\ndashboardHeader(title = \"Basic Template\",\n                # puts sidebar toggle on right\n                titleWidth = \"calc(100% - 44px)\")"},{"path":"shinydashboard.html","id":"dashboardsidebar","chapter":"2 ShinyDashboard","heading":"2.2.2 dashboardSidebar","text":"sidebar usually contains sidebarMenu(), needs unique ID list menu items. menuItem() consists title, tabName used refer tab later, icon. can find list available free icons fontawesome.can also add elements sidebar. code adds link using tags$() Text inside sidebar usually looks close edges, use css style link add padding.want use sidebar, include dashboardSidebar(disable = TRUE) inside dashboardPage().","code":"\ndashboardSidebar(\n  sidebarMenu(id = \"tabs\",\n              menuItem(\n                \"Tab Title\",\n                tabName = \"demo_tab\",\n                icon = icon(\"dragon\")\n              )),\n  tags$a(\"ShinyIntro book\",\n         href = \"https://debruine.github.io/shinyintro/\",\n         style = \"padding: 1em;\")\n)"},{"path":"shinydashboard.html","id":"dashboardbody","chapter":"2 ShinyDashboard","heading":"2.2.3 dashboardBody","text":"main part app goes inside dashboardBody() going use javascript functions (basic template learn Section 7.3.1), need put useShinyjs() first. include header, linking custom CSS JavaScript files.contents body go . common pattern multi-page tabbed pattern, set tabItems(), contains tabItem() tab. tabName match name used sidebar menuItem(), tab shows user clicks corresponding menu item.Since tab usually quite complex list elements, like define tab outside dashboardPage() just put list tab objects inside tabItems(). way, easy move whole tab definition external file gets complex (see Section 8).","code":"\ndashboardBody(shinyjs::useShinyjs(),\n              tags$head(\n                # links to files in www/\n                tags$link(rel = \"stylesheet\",\n                          type = \"text/css\",\n                          href = \"custom.css\"),\n                tags$script(src = \"custom.js\")\n              ),\n              tabItems(tabItem(tabName = \"demo_tab\",\n                               imageOutput(\"logo\"))))"},{"path":"shinydashboard.html","id":"body-structure","chapter":"2 ShinyDashboard","heading":"2.3 Body Structure","text":"Tab items can structured several ways. simplest, can just list element tabName.","code":"\ntabItem(\n  tabName = \"demo_tab\",\n  textInput(\"given\", \"Given Name\"),\n  textInput(\"surname\", \"Surname\"),\n  selectInput(\"pet\", \"What is your favourite pet?\",\n              c(\"cats\", \"dogs\", \"ferrets\")),\n  textAreaInput(\"bio\", NULL,\n                height = \"100px\",\n                placeholder = \"brief bio\")\n)"},{"path":"shinydashboard.html","id":"boxes","chapter":"2 ShinyDashboard","heading":"2.3.1 Boxes","text":"shinydashboard apps organise parts inside boxes.\nFigure 2.2: Organizing elements inside boxes.\ncan add titles boxes, make collapsible /give solid headers.normal shinydashboard style, solid headers colour box also status argument set. basic template provided class, custom CSS make solid headers colour theme skin, can also set status.\nFigure 2.3: Shinydashboard Box Statuses.\n","code":"\ntabItem(tabName = \"demo_tab\",\n        box(\n          textInput(\"given\", \"Given Name\"),\n          textInput(\"surname\", \"Surname\"),\n          selectInput(\"pet\", \"What is your favourite pet?\",\n                      c(\"cats\", \"dogs\", \"ferrets\"))\n        ),\n        box(\n          textAreaInput(\"bio\", NULL,\n                        height = \"100px\",\n                        placeholder = \"brief bio\")\n        ))\ntabItem(\n    tabName = \"demo_tab\",\n    box(title = \"Personal Info\",\n        collapsible = TRUE, \n        textInput(\"given\", \"Given Name\"),\n        textInput(\"surname\", \"Surname\"),\n        selectInput(\"pet\", \"What is your favourite pet?\", c(\"cats\", \"dogs\", \"ferrets\"))\n    ),\n    box(title = \"Biography\",\n        solidHeader = TRUE, \n        textAreaInput(\"bio\", NULL, height = \"100px\", placeholder = \"brief bio\")\n    )\n)\ntabItem(\n    tabName = \"demo_tab\",\n    box(title = \"No Status\", solidHeader = TRUE),\n    box(title = \"Primary\",   solidHeader = TRUE, status = \"primary\"),\n    box(title = \"Success\",   solidHeader = TRUE, status = \"success\"),\n    box(title = \"Info\",      solidHeader = TRUE, status = \"info\"),\n    box(title = \"Warning\",   solidHeader = TRUE, status = \"warning\"),\n    box(title = \"Danger\",    solidHeader = TRUE, status = \"danger\")\n)"},{"path":"shinydashboard.html","id":"info-and-value-boxes","chapter":"2 ShinyDashboard","heading":"2.3.2 Info and Value Boxes","text":"can use infoBox() valueBox() highlight small amount information. default background aqua, basic template changes skin colour. However, can customise setting color argument.\nFigure 2.4: Examples value info boxes can make.\nShinydashboard uses grid system 12 units across. default width boxes 6, info value boxes 4.Try write code create second row info boxes show third row value boxes.","code":"\ntabItem(\n    tabName = \"demo_tab\",\n    infoBox(\"Default InfoBox\", \"Value\", \"Subtitle\"),\n    valueBox(\"Default ValueBox\", \"With subtitle\"),\n    valueBox(\"No subtitle\", \"\")\n)"},{"path":"shinydashboard.html","id":"tab-boxes","chapter":"2 ShinyDashboard","heading":"2.3.3 Tab Boxes","text":"Create box multiple tabs using tabBox(), contains tabPanel().\nFigure 2.5: Tab Boxes\n","code":"\ntabItem(\n    tabName = \"demo_tab\",\n    tabBox(\n        title = \"Test Yourself 1\",\n        tabPanel(\"Question\", \"What function creates tabBox contents?\"),\n        tabPanel(\"Answer\", \"tabPanel()\")\n    ),\n    tabBox(\n        title = \"Test Yourself 2\",\n        side = \"right\",\n        selected = \"Question\",\n        tabPanel(\"Answer\", \"selected\"),\n        tabPanel(\"Question\", \"What attribute changes the default tab?\")\n    )\n)"},{"path":"shinydashboard.html","id":"row-layout","chapter":"2 ShinyDashboard","heading":"2.3.4 Row Layout","text":"can arrange boxes inside fluidRow(). Set box height pixels. window gets narrow, boxes move stack instead rows.\nFigure 2.6: example fluidRow layout boxes different widths heights.\n","code":"\ntabItem(\n    tabName = \"demo_tab\",\n    fluidRow(\n      box(\"A\", title = \"2x100\", width = 2, height = 100),\n      box(\"B\", title = \"1x100\", width = 1, height = 100),\n      box(\"C\", title = \"2x200\", width = 2, height = 200),\n      box(\"D\", title = \"3x300\", width = 3, height = 300),\n      box(\"E\", title = \"4x100\", width = 4, height = 100),\n      box(\"F\", title = \"5x100\", width = 5, height = 100),\n      box(\"G\", title = \"7x100\", width = 7, height = 100)\n    )\n)"},{"path":"shinydashboard.html","id":"column-layout","chapter":"2 ShinyDashboard","heading":"2.3.5 Column Layout","text":"Alternatively, can arrange boxes elements inside column() specific width. Elements inside column width relative column width, matter value set column width , element inside width 6 half column width.\nFigure 2.7: example column layout.\n","code":"\ntabItem(\n    tabName = \"demo_tab\",\n    column(width = 6,\n        box(\"A\", title = \"12x100\", width = 12, height = 100),\n        box(\"B\", title = \"6x100\", width = 6, height = 100),\n        box(\"C\", title = \"6x200\", width = 6, height = 200)\n    ), \n    column(width = 4,\n        box(\"D\", title = \"12x300\", width = 12, height = 300),\n        box(\"E\", title = \"12x100\", width = 12, height = 100)\n    ),\n    column(width = 2,\n        box(\"F\", title = \"12x100\", width = 12, height = 100),\n        box(\"G\", title = \"12x100\", width = 12, height = 100)\n    )\n)"},{"path":"shinydashboard.html","id":"resources-shinydashboard","chapter":"2 ShinyDashboard","heading":"2.4 Further Resources","text":"ShinyDashboard","code":""},{"path":"shinydashboard.html","id":"your-app-sdb","chapter":"2 ShinyDashboard","heading":"2.5 Your App","text":"","code":""},{"path":"shinydashboard.html","id":"create-an-app-from-the-basic-template","chapter":"2 ShinyDashboard","heading":"2.5.1 Create an app from the basic template","text":"Create demo app basic template run .Close app run .Look code see theme colour sidebar icon change.Change title author DESCRIPTION file set DisplayMode \"Showcase\" instead \"Normal\" see happens run .","code":""},{"path":"shinydashboard.html","id":"customize-the-header","chapter":"2 ShinyDashboard","heading":"2.5.2 Customize the header","text":"Change title title app want build.Choose skin color.Experiment different values titleWidth argument. Try \"50%\" \"200px\" see title behaves change width browser window.","code":""},{"path":"shinydashboard.html","id":"customize-the-sidebar","chapter":"2 ShinyDashboard","heading":"2.5.3 Customize the sidebar","text":"Add tabs sidebarMenu() pages custom app.Choose appropriate icon tab.Remove link ShinyIntro book add information app, like author use license.","code":""},{"path":"shinydashboard.html","id":"customize-the-body","chapter":"2 ShinyDashboard","heading":"2.5.4 Customize the body","text":"Create empty tabItem() tab put sidebarMenu() add dashboardBody().Start adding elements tab, list inputs questions plotOutput() display feedback plot.Experiment different ways display elements grouping boxesExperiment different layouts boxes elements.Make sure check app looks different sized screens, phone screens.","code":""},{"path":"inputs.html","id":"inputs","chapter":"3 Inputs","heading":"3 Inputs","text":"Inputs ways users can communicate information Shiny app. Explore different input types embedded app read set type.\nFigure 3.1: Input Demo App. can also access app shinyintro::app(\"input_demo\") view separate tab showcase interface.\n","code":""},{"path":"inputs.html","id":"input-functions","chapter":"3 Inputs","heading":"3.1 Input functions","text":"","code":""},{"path":"inputs.html","id":"textinput","chapter":"3 Inputs","heading":"3.1.1 textInput","text":"textInput() creates one-line box short text input. first argument, inputId (argument name usually omitted), needs unique string use another input output app.Experiment values label, value, width, placeholder see .","code":"\ndemo_text <- \n  textInput(\"demo_text\", \n            label = \"Name\", \n            value = \"\", \n            width = \"100%\",\n            placeholder = \"Your Name\")"},{"path":"inputs.html","id":"textareainput","chapter":"3 Inputs","heading":"3.1.2 textAreaInput","text":"textAreaInput() creates multi-line box longer text input.inputId widget ?\ntextAreaInputdemo_textareaBiography","code":"\ndemo_textarea <- \n  textAreaInput(\"demo_textarea\", \n                label = \"Biography\", \n                value = \"\",\n                width = \"100%\",\n                rows = 5, \n                placeholder = \"Tell us something interesting about you.\")"},{"path":"inputs.html","id":"selectinput","chapter":"3 Inputs","heading":"3.1.3 selectInput","text":"selectInput() creates drop-menu. Set first choice \"\" default NA. choices named list vector, names shown values recorded. choices named, displayed recorded values .set multiple TRUE, can also make select users can choose multiple options.","code":"\ndemo_select <- \n  selectInput(\"demo_select\", \n              label = \"Do you like Shiny?\", \n              choices = list(\"\", \n                             \"Yes, I do\" = \"y\", \n                             \"No, I don't\" = \"n\"),\n              selected = NULL,\n              width = \"100%\")\ngenders <- list( # no blank needed\n  \"Non-binary\" = \"nb\",\n  \"Male\" = \"m\",\n  \"Female\" = \"f\",\n  \"Agender\" = \"a\",\n  \"Gender Fluid\" = \"gf\"\n)\n\ndemo_select_multi <- \n  selectInput(\"demo_select2\", \n              label = \"Gender (select all that apply)\", \n              choices = genders,\n              selected = NULL,\n              multiple = TRUE, \n              selectize = FALSE,\n              size = 5)"},{"path":"inputs.html","id":"checkboxgroupinput","chapter":"3 Inputs","heading":"3.1.4 checkboxGroupInput","text":"However, interface almost always looks better checkboxGroupInput().can get checkboxes display horizontally instead vertically?display = 'horizontal'class = 'horiz'inline = TRUEclass = 'shiny-input-container-inline'","code":"\ndemo_cbgi <-\n  checkboxGroupInput(\"demo_cbgi\",\n                     label = \"Gender (select all that apply)\",\n                     choices = genders)"},{"path":"inputs.html","id":"checkboxinput","chapter":"3 Inputs","heading":"3.1.5 checkboxInput","text":"can also make single checkbox checkboxInput(). value TRUE checked FALSE .sliderInput() allows choose numbers min max value.happens change value step? Try changing value c(10, 20).","code":"\ndemo_cb <- checkboxInput(\"demo_cb\",\n                         label = \"I love R\",\n                         value = TRUE)\ndemo_slider <- sliderInput(\"demo_slider\",\n                           label = \"Age\",\n                           min = 0,\n                           max = 100,\n                           value = 0,\n                           step = 1,\n                           width = \"100%\")"},{"path":"inputs.html","id":"radiobuttons","chapter":"3 Inputs","heading":"3.1.6 radioButtons","text":"want users able choose one option small number short options, radioButton() good interface.Radio buttons default selecting first item unless set selected choice value character(0) start selection.","code":"\ndemo_radio <- radioButtons(\"demo_radio\",\n                           label = \"Choose one\",\n                           choices = c(\"Cats\", \"Dogs\"),\n                           selected = character(0),\n                           inline = TRUE)"},{"path":"inputs.html","id":"dateinput","chapter":"3 Inputs","heading":"3.1.7 dateInput","text":"find date interface little clunky, might just click back button year interface 44 time find birthdate. However, also allows type date following format can set.IMHO, default \"yyyy-mm-dd\" best sorts chronological order. let catch storing dates like \"m/d/yyyy\".set format order display dates like \"Sunday July 4, 2021\"?D M d, YDD MM d, yyyyDAY MONTH day, YEARD MM dd, yyyy","code":"\ndemo_date <- dateInput(\"demo_date\",\n                       label = \"What is your birth date?\",\n                       min = \"1900-01-01\",\n                       max = Sys.Date(),\n                       format = \"yyyy-mm-dd\",\n                       startview = \"year\")"},{"path":"inputs.html","id":"fileinput","chapter":"3 Inputs","heading":"3.1.8 fileInput","text":"Users can upload one files fileInput(). argument accept lets limit certain file types, browsers can bypass requirement, fool-proof.set accept accept image file?image/*.jpgjpgimages.img","code":"\ndemo_file <- fileInput(\"demo_file\",\n                       label = \"Upload a data table\",\n                       multiple = FALSE,\n                       accept = c(\".csv\", \".tsv\"),\n                       buttonLabel = \"Upload\")"},{"path":"inputs.html","id":"setting-inputs-programatically","chapter":"3 Inputs","heading":"3.2 Setting inputs programatically","text":"Sometimes need change value input code, resetting questionnaire response answer another item. following code resets inputs .Note select inputs, checkbox groups, radio buttons use argument selected value(). want set values checkbox group radio button group unchecked, set selected = character(0).","code":"\nupdateTextInput(session, \"demo_text\", value = \"\")\nupdateTextAreaInput(session, \"demo_textarea\", value = \"\")\nupdateSelectInput(session, \"demo_select\", selected = \"\")\nupdateCheckboxGroupInput(session, \"demo_cbgi\", selected = character(0))\nupdateCheckboxInput(session, \"demo_cb\", value = TRUE)\nupdateRadioButtons(session, \"demo_radio\", selected = character(0))\nupdateSliderInput(session, \"demo_slider\", value = 0)\nupdateDateInput(session, \"demo_date\", value = NULL)"},{"path":"inputs.html","id":"resources-inputs","chapter":"3 Inputs","heading":"3.3 Further Resources","text":"Mastering Shiny Section 2.2RStudio Shiny Tutorials","code":""},{"path":"inputs.html","id":"exercises-inputs","chapter":"3 Inputs","heading":"3.4 Exercises","text":"","code":""},{"path":"inputs.html","id":"pets","chapter":"3 Inputs","heading":"Pets","text":"Create interface gets people rate following pets 9-point scale. can use option labels input type like.Dogs 🐕Cats 🐈Birds 🦜Fish 🐠Mice 🐁Hedgehogs 🦔Snakes 🐍","code":""},{"path":"inputs.html","id":"your-app-inputs","chapter":"3 Inputs","heading":"3.5 Your App","text":"app developing, add tab questionnaire interested set appropriate inputs.Add \"reset\" button questionnaire tab write server() code reset inputs.","code":""},{"path":"outputs.html","id":"outputs","chapter":"4 Outputs","heading":"4 Outputs","text":"Output ways Shiny app can dynamically display information user. user interface (UI), create outputs IDs reference associated rendering function inside server function.Explore different output types embedded app read set type.\nFigure 4.1: Output Demo App. can also access app shinyintro::app(\"output_demo\")view separate tab showcase interface.\n","code":""},{"path":"outputs.html","id":"text","chapter":"4 Outputs","heading":"4.1 Text","text":"textOutput() defaults text inside generic <span> <div>, can use different element container argument.renderText() replaces text linked element returned string.use verbatimTextOutput() UI (change render function), show output fixed-width font. can good code text want user copy.","code":"\n# in the UI function\ntextOutput(\"demo_text\", container = tags$h3)\n# in the server function\noutput$demo_text <- renderText({\n    sprintf(\"Plot of %s\", input$y)\n})\n# in the UI function\nverbatimTextOutput(\"demo_verbatim\")\n\n# in the server function\noutput$demo_verbatim <- renderText({\n  code <-\n    \"ggplot(iris, aes(x = Species, y = %s, color = Species)) +\n    geom_violin(show.legend = FALSE) +\n    stat_summary(show.legend = FALSE)\"\n  \n  sprintf(code, input$y)\n})"},{"path":"outputs.html","id":"plots","chapter":"4 Outputs","heading":"4.2 Plots","text":"plotOutput() displays plots made base R plotting functions (e.g., plot(), hist()) ggplot2 functions.default value width?100%400px4005in7in\ndefault value height?100%400px4005in7inIf want create dynamic plots change input, note need use y = .data[[input$y]] inside aes(), instead just y = input$y.","code":"\n# in the UI function\nplotOutput(\"demo_plot\", width = \"500px\", height=\"300px\")\n# in the server function\noutput$demo_plot <- renderPlot({\n  ggplot(iris, aes(x = Species, y = .data[[input$y]], color = Species)) +\n    geom_violin(show.legend = FALSE) +\n    stat_summary(show.legend = FALSE) +\n    ylab(input$y)\n})"},{"path":"outputs.html","id":"images","chapter":"4 Outputs","heading":"4.3 Images","text":"imageOutput() takes arguments plotOutput(). can leave width height defaults going set values render function.renderImage() needs return named list least src image path. can also set width height (numeric values pixels), class alt (alt-text screen readers).deleteFile argument currently optional, triggers periodic warnings optional future. set TRUE making temporary file (stops unneeded plots using memory) FALSE referencing file previously saved.","code":"\n# in the UI function\nimageOutput(\"demo_image\")\n# in the server function\noutput$demo_image <- renderImage({\n    list(src = \"images/flower.jpg\",\n         width = 100,\n         height = 100,\n         alt = \"A flower\")\n}, deleteFile = FALSE)"},{"path":"outputs.html","id":"tables","chapter":"4 Outputs","heading":"4.4 Tables","text":"Display table using tableOutput().paired renderTable(), makes table data frame returns.Note need use .data[[input$y]] inside dplyr::summarise(), instead just input$y dynamically choose variable summarise.","code":"\n# in the UI function\ntableOutput(\"demo_table\")\n# in the server function\noutput$demo_table <- renderTable({\n  iris %>%\n    group_by(Species) %>%\n    summarise(mean = mean(.data[[input$y]]),\n              sd = sd(.data[[input$y]]))\n})"},{"path":"outputs.html","id":"data-tables","chapter":"4 Outputs","heading":"4.4.1 Data Tables","text":"long table show, one want users able sort search, use DT::dataTableOutput() (synonym DTOutput()).basic shiny package dataTableOutput() renderDataTable() functions, can buggy. versions DT package better many additional functions, use .paired render function renderDataTable() (synonym renderDT()). can customise data tables many ways, stick basic example limits number rows shown 10.can use DT synonyms make sure accidentally using shiny versions, options.","code":"\n# in the UI function\nDT::dataTableOutput(\"demo_datatable\",\n                    width = \"50%\",\n                    height = \"auto\")\n# in the server function\noutput$demo_datatable <- DT::renderDataTable({\n    iris\n}, options = list(pageLength = 10))"},{"path":"outputs.html","id":"dynamic-html","chapter":"4 Outputs","heading":"4.5 Dynamic HTML","text":"want dynamically create parts UI, can use uiOutput().can create UI using renderUI() return HTML created using input functions learned Section 3, tag functions, HTML write (argument HTML()).function htmlOutput() synonym uiOutput(), might see code examples, use uiOutput() make connection renderUI() clearer, since renderHTML().","code":"\n# in the UI function\nuiOutput(\"demo_ui\")\n# in the server function\noutput$demo_ui <- renderUI({\n  cols <- names(iris)[1:4]\n  selectInput(\"y\", \"Column to plot\", cols, \"Sepal.Length\")\n})"},{"path":"outputs.html","id":"reosurces-outputs","chapter":"4 Outputs","heading":"4.6 Further Resources","text":"Mastering Shiny Section 2.3RStudio Shiny TutorialsDT (data tables)","code":""},{"path":"outputs.html","id":"exercises-outputs","chapter":"4 Outputs","heading":"4.7 Exercises","text":"","code":""},{"path":"outputs.html","id":"modify-the-demo","chapter":"4 Outputs","heading":"Modify the demo","text":"Clone \"output_demo\" app modify use different dataset.","code":""},{"path":"outputs.html","id":"pets-1","chapter":"4 Outputs","heading":"Pets","text":"Add outputs appropriate render functions show plot data pets questionnaire made exercise Section 3.","code":""},{"path":"outputs.html","id":"your-app-outputs","chapter":"4 Outputs","heading":"4.8 Your App","text":"app developing, add relevant outputs, plots tables, appropriate render function output. can leave contents blank now add code create output.","code":""},{"path":"reactives.html","id":"reactives","chapter":"5 Reactive functions","heading":"5 Reactive functions","text":"lot great tutorials explain principles behind reactive functions, never made sense first started , just going give examples can extrapolate principles .Reactivity Shiny determines code server() gets run . types objects, input object objects made reactiveValues(), can trigger types functions run whenever change.example, use reactive_demo app. shows three select inputs allow user choose values cut, color, clarity columns diamonds dataset ggplot2, draws plot relationship carat price selected subset.\nFigure 5.1: Reactive Demo App. can also access app shinyintro::app(\"reactive_demo\")view separate tab showcase interface.\nrelevant code UI. four inputs: cut, color, clarity, update. two outputs: title plot.Whenever input changes, trigger types functions run.","code":"box(\n  title = \"Diamonds\",\n  solidHeader = TRUE,\n  selectInput(\"cut\", \"Cut\", levels(diamonds$cut)),\n  selectInput(\"color\", \"Color\", levels(diamonds$color)),\n  selectInput(\"clarity\", \"Clarity\", levels(diamonds$clarity)),\n  actionButton(\"update\", \"Update Plot\")\n),\nbox(\n  title = \"Plot\",\n  solidHeader = TRUE,\n  textOutput(\"title\"),\n  plotOutput(\"plot\")\n)"},{"path":"reactives.html","id":"render-functions","chapter":"5 Reactive functions","heading":"5.1 Render functions","text":"Functions render output, like renderText() renderPlot() run whenever input code changes. can trigger render function just putting reactive alone line, even using rest code.example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveWhich inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall ","code":"\nserver <- function(input, output, session) {\n  output$plot <- renderPlot({\n    data <- filter(diamonds,\n                   cut == input$cut,\n                   color == input$color,\n                   clarity == input$clarity)\n    \n    ggplot(data, aes(carat, price)) +\n      geom_point(color = \"#605CA8\", alpha = 0.5) +\n      geom_smooth(method = lm, color = \"#605CA8\")\n  })\n  \n  output$title <- renderText({\n    input$update # just here to trigger the function\n    \n    sprintf(\"Cut: %s, Color: %s, Clarity: %s\",\n                     input$cut,\n                     input$color,\n                     input$clarity)\n  })\n} "},{"path":"reactives.html","id":"reactive-1","chapter":"5 Reactive functions","heading":"5.2 reactive()","text":"move data filtering outside renderPlot(), get error message like \"access reactive value 'cut' outside reactive consumer.\" means input values can read inside certain functions, like reactive(), observeEvent(), render function.However, can put data filtering inside reactive(). means whenever input inside function changes, code run update value data(). can useful need recalculate data table time inputs change, use one function.example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveWhich inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall aboveMy common error trying use data title object instead function. Notice first argument ggplot longer data, data() set value data data(newdata), data <- newdata. now, just remember quirk shiny.","code":"\nserver <- function(input, output, session) {\n  data <- reactive({\n    filter(diamonds,\n           cut == input$cut,\n           color == input$color,\n           clarity == input$clarity)\n  })\n  \n  title <- reactive({\n    sprintf(\"Cut: %s, Color: %s, Clarity: %s, N: %d\",\n                     input$cut,\n                     input$color,\n                     input$clarity)\n  })\n  \n  output$plot <- renderPlot({\n    ggplot(data(), aes(carat, price)) +\n      geom_point(color = \"#605CA8\", alpha = 0.5) +\n      geom_smooth(method = lm, color = \"#605CA8\")\n  })\n  \n  output$text <- renderText(title())\n} "},{"path":"reactives.html","id":"observeevent-1","chapter":"5 Reactive functions","heading":"5.3 observeEvent()","text":"want update things update button clicked, whenever user changes option?learned observeEvent() Section 1.4. function runs code whenever value first argument changes. reactive values inside function, trigger code run change.example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveIn example , inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall aboveYou avoid creating reactive functions inside functions like . functions triggered changes reactive inputs inside . make difference example render functions reactive values , can cause huge problems complex apps.","code":"\nserver <- function(input, output, session) {\n  observeEvent(input$update, {\n    data <- filter(diamonds,\n                   cut == input$cut,\n                   color == input$color,\n                   clarity == input$clarity)\n    \n    title <- sprintf(\"Cut: %s, Color: %s, Clarity: %s\",\n                     input$cut,\n                     input$color,\n                     input$clarity)\n    \n    output$plot <- renderPlot({\n      ggplot(data, aes(carat, price)) +\n        geom_point(color = \"#605CA8\", alpha = 0.5) +\n        geom_smooth(method = lm, color = \"#605CA8\")\n    })\n    \n    output$title <- renderText(title)\n  })\n} "},{"path":"reactives.html","id":"reactiveval","chapter":"5 Reactive functions","heading":"5.4 reactiveVal()","text":"can avoid problem defining render function inside reactive function creating reactive value using reactiveVal(). allows update value data() just using code inside observeEvent() function created , function. useful multiple functions need update value., use observeEvent() trigger data filtering code update button pressed. new data set assigned data() using code data(newdata).data() returns reactive value, trigger renderPlot() whenever changes.example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveWhich inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall aboveWe used data <- reactiveVal(diamonds) order data() value cause error renderPlot() runs first time.","code":"\nserver <- function(input, output, session) {\n    data <- reactiveVal(diamonds)\n    title <- reactiveVal()\n    \n    observeEvent(input$update, {\n        newdata <- filter(diamonds,\n                   cut == input$cut,\n                   color == input$color,\n                   clarity == input$clarity)\n    \n        newtitle <- sprintf(\"Cut: %s, Color: %s, Clarity: %s\",\n                         input$cut,\n                         input$color,\n                         input$clarity)\n            \n        data(newdata) # updates data()\n        title(newtitle) # updates title()\n    })\n    \n    output$plot <- renderPlot({\n        ggplot(data(), aes(carat, price)) +\n            geom_point(color = \"#605CA8\", alpha = 0.5) +\n            geom_smooth(method = lm, color = \"#605CA8\")\n    })\n    \n    output$title <- renderText(title())\n} "},{"path":"reactives.html","id":"reactivevalue","chapter":"5 Reactive functions","heading":"5.5 reactiveValue()","text":"need set new reactiveVal() value app want make reactive. prefer use reactiveValues() can used new reactive value need works just like input, except can assign new values .can just set new object reactiveValues() can initialise starting values like . object v named list, just like input, values change, triggers reactive functions exactly like input .example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveWhich inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall aboveNote refer reactive values set way v$data v$title, data() title(), set v$data <- newdata, v$data(newdata).","code":"\nserver <- function(input, output, session) {\n    v <- reactiveValues(\n        data = diamonds,\n        title = \"All Data\"\n    )\n    \n    observeEvent(input$update, {\n        v$data <- filter(diamonds,\n                       cut == input$cut,\n                       color == input$color,\n                       clarity == input$clarity)\n        \n        v$title <- sprintf(\"Cut: %s, Color: %s, Clarity: %s\",\n                         input$cut,\n                         input$color,\n                         input$clarity)\n    })\n    \n    output$plot <- renderPlot({\n        ggplot(v$data, aes(carat, price)) +\n            geom_point(color = \"#605CA8\", alpha = 0.5) +\n            geom_smooth(method = lm, color = \"#605CA8\")\n    })\n    \n    output$title <- renderText(v$title)\n} "},{"path":"reactives.html","id":"eventreactive","chapter":"5 Reactive functions","heading":"5.6 eventReactive()","text":"reactive() triggered whenever input values inside change, eventReactive() triggered value first argument changes, like observeEvent(), returns reactive function like reactive().example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveWhich inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall ","code":"\nserver <- function(input, output, session) {\n  data <- eventReactive(input$update, {\n    filter(diamonds,\n           cut == input$cut,\n           color == input$color,\n           clarity == input$clarity)\n  })\n  \n  title <- eventReactive(input$update, {\n    sprintf(\"Cut: %s, Color: %s, Clarity: %s\",\n                     input$cut,\n                     input$color,\n                     input$clarity)\n  })\n  \n  output$plot <- renderPlot({\n    ggplot(data(), aes(carat, price)) +\n      geom_point(color = \"#605CA8\", alpha = 0.5) +\n      geom_smooth(method = lm, color = \"#605CA8\")\n  })\n  \n  output$text <- renderText(title())\n}"},{"path":"reactives.html","id":"isolate","chapter":"5 Reactive functions","heading":"5.7 isolate()","text":"want use input reactive value inside reactive function, want trigger function, can isolate() . can also use isolate() get reactive value outside reactive function.example , inputs trigger renderPlot() run produce new plot?cutcolorclarityupdatecut, color & clarityall aboveWhich inputs trigger renderText() run produce new title?cutcolorclarityupdatecut, color & clarityall ","code":"\nserver <- function(input, output, session) {\n  data <- reactive({\n    filter(\n      diamonds,\n      cut == isolate(input$cut),\n      color == isolate(input$color),\n      clarity == input$clarity\n    )\n  })\n  \n  title <- reactive({\n    sprintf(\n      \"Cut: %s, Color: %s, Clarity: %s\",\n      input$cut,\n      isolate(input$color),\n      isolate(input$clarity)\n    )\n  })\n  \n  # what is the title at initialisation?\n  debug_msg(isolate(title()))\n  \n  output$plot <- renderPlot({\n    ggplot(data(), aes(carat, price)) +\n      geom_point(color = \"#605CA8\", alpha = 0.5) +\n      geom_smooth(method = lm, color = \"#605CA8\")\n  })\n  \n  output$title <- renderText(title())\n} "},{"path":"reactives.html","id":"resources-reactive","chapter":"5 Reactive functions","heading":"5.8 Further Resources","text":"Mastering Shiny - Basic ReactivityReactivity - overviewUse reactive expressionsMastering Shiny - Mastering Reactivity","code":""},{"path":"reactives.html","id":"exercises-reactive","chapter":"5 Reactive functions","heading":"5.9 Exercises","text":"following exercises, clone \"reactive_demo\" replace boxes ui code . Delete code server(). Make sure runs go ahead.grouping summarising msleep data table ggplot2 calculating mean standard deviation () numeric columns grouped categorical columns vore, order, conservation. sure create summary table dplyr, look following code concrete example.","code":"box(width = 4,\n    selectInput(\"stat\", \"Statistic\", c(\"mean\", \"sd\")),\n    selectInput(\"group\", \"Group By\", c(\"vore\", \"order\", \"conservation\")),\n    actionButton(\"update\", \"Update Table\")),\nbox(width = 8,\n    solidHeader = TRUE,\n    title = textOutput(\"caption\"),\n    tableOutput(\"table\"))\nmsleep %>%\n  group_by(vore) %>%\n  summarise_if(is.numeric, \"mean\", na.rm = TRUE)"},{"path":"reactives.html","id":"render","chapter":"5 Reactive functions","heading":"render","text":"Use render functions update output table caption whenever group stat change.","code":"\nserver <- function(input, output, session) {\n  output$table <- renderTable({\n    msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n  })\n  \n  output$caption <- renderText({\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n} "},{"path":"reactives.html","id":"reactive-2","chapter":"5 Reactive functions","heading":"reactive","text":"Use reactive() update output table caption whenever group stat change. Ignore update button.","code":"\nserver <- function(input, output, session) {\n  data <- reactive({\n    msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n  })\n  output$table <- renderTable(data())\n  \n  caption <- reactive({\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n  output$caption <- renderText(caption())\n} "},{"path":"reactives.html","id":"observeevent-2","chapter":"5 Reactive functions","heading":"observeEvent","text":"Use observeEvent() update output table appropriate summary table update caption appropriate caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  observeEvent(input$update, {\n    data <- msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n    output$table <- renderTable(data)\n    \n    caption <-\n      sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n    output$caption <- renderText(caption)\n  })\n} "},{"path":"reactives.html","id":"reactiveval-1","chapter":"5 Reactive functions","heading":"reactiveVal","text":"Use reactiveVal() update output table caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  data <- reactiveVal()\n  caption <- reactiveVal()\n  \n  observeEvent(input$update, {\n    newdata <- msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n    data(newdata)\n    \n    # this is an alternative way to set reactiveVal\n    # by piping the value into the function\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group) %>%\n      caption()\n  })\n  \n  output$table <- renderTable(data())\n  output$caption <- renderText(caption())\n} "},{"path":"reactives.html","id":"reactivevalues","chapter":"5 Reactive functions","heading":"reactiveValues","text":"Use reactiveValues() update output table caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  v <- reactiveValues()\n  \n  observeEvent(input$update, {\n    v$data <- msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n    \n    v$caption <-\n      sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n  \n  output$table <- renderTable(v$data)\n  output$caption <- renderText(v$caption)\n} "},{"path":"reactives.html","id":"eventreactive-1","chapter":"5 Reactive functions","heading":"eventReactive","text":"Use eventReactive() update output table caption update button clicked.","code":"\nserver <- function(input, output, session) {\n  data <- eventReactive(input$update, {\n    msleep %>%\n      group_by(.data[[input$group]]) %>%\n      summarise_if(is.numeric, input$stat, na.rm = TRUE)\n  })\n  output$table <- renderTable(data())\n  \n  caption <- eventReactive(input$update, {\n    sprintf(\"%ss by %s\", toupper(input$stat), input$group)\n  })\n  output$caption <- renderText(caption())\n} "},{"path":"reactives.html","id":"your-app-reactive","chapter":"5 Reactive functions","heading":"5.10 Your App","text":"Add reactive functions custom app. Think patterns best app. example, need update data table inputs change, use one output, best use reactive() create function data callit render functions output, rather creating data table render function.","code":""},{"path":"data.html","id":"data","chapter":"6 Reading and saving data","heading":"6 Reading and saving data","text":"\nFigure 6.1: RadioTables Demo App. can also access app shinyintro::app(\"radiotables\")view separate tab showcase interface.\n","code":""},{"path":"data.html","id":"local-data","chapter":"6 Reading and saving data","heading":"6.1 Local Data","text":"can read write data Shiny app way R script. focus reading data, since writing data locally can cause problems better done Google Sheets.working directory Shiny app directory app.R . recommend keeping data directory called data keep things tidy.","code":"\n# read local data\nmy_data <- readxl::read_xls(\"data/my_data.xls\")\n\n# read data on the web\ncountries <- readr::read_csv(\"https://datahub.io/core/country-list/r/data.csv\")\nlanguages <- jsonlite::read_json(\"https://datahub.io/core/language-codes/r/language-codes.json\")"},{"path":"data.html","id":"google_sheets","chapter":"6 Reading and saving data","heading":"6.2 Google Sheets","text":"One best ways start collecting data Shiny app Google Sheets. allows collect data place multiple servers, might happen running app locally one computer service like shinyapps.io. R package googlesheets4 makes easy work Google Sheets R.just want read data public Google Sheet, need authorisation. Just start code gs4_deauth() load googlesheets4 (otherwise prompted log ). can read data like :However, even Google Sheet publicly editable, add data without authorising account. try, get error .can authorise interactively using following code (email), prompt authorise \"Tidyverse API Packages\" first time .However, work want Shiny apps able access Google Sheets.","code":"\nlibrary(googlesheets4)\ngs4_deauth()\nsheet_id <- \"https://docs.google.com/spreadsheets/d/1tQCYQrI4xITlPyxb9dQ-JpMDYeADovIeiZZRNHkctGA/\"\nread_sheet(sheet_id)\ndata <- data.frame(number = 4, letter = \"D\")\nsheet_append(sheet_id, data)## Error: Client error: (401) UNAUTHENTICATED\n## • Request not authenticated due to missing, invalid, or expired OAuth\n##   token.\n## • Request is missing required authentication credential. Expected\n##   OAuth 2 access token, login cookie or other valid authentication\n##   credential. See\n##   https://developers.google.com/identity/sign-in/web/devconsole-project.\ngs4_auth(email = \"debruine@gmail.com\")"},{"path":"data.html","id":"authorisation-for-apps","chapter":"6 Reading and saving data","heading":"6.2.1 Authorisation for Apps","text":"First, need get token store cache folder app directory. going call directory .secrets. Run following code console (Rmd file). open web browser window prompt choose Google account authorise \"Tidyverse API Packages\".\nFigure 6.2: Prompts choose account, grant permissions, confirm.\nfinished, see page says something like, \"Authentication complete. Please close page return R.\" file pane RStudio, now see directory called .secrets app directory.using GitHub, want save secret info public repository, run following code ignore directories called .secrets (exist computer GitHub).Now, can include following code top app.R script authorise app read write files.","code":"\nsetwd(app_directory)\ngs4_auth(email = \"debruine@gmail.com\", cache = \".secrets\")\n\n# optionally, authorise google drive to search your drive\n# googledrive::drive_auth(email = \"debruine@gmail.com\", cache = \".secrets\")\nusethis::use_git_ignore(\".secrets\")\nusethis::use_git_ignore(\"*/.secrets\")\ngs4_auth(cache = \".secrets\", email = \"debruine@gmail.com\")"},{"path":"data.html","id":"accessing-an-existing-sheet","chapter":"6 Reading and saving data","heading":"6.2.2 Accessing an existing sheet","text":"existing Google Sheet, can access URL.","code":"\nsheet_id <- \"https://docs.google.com/spreadsheets/d/1tQCYQrI4xITlPyxb9dQ-JpMDYeADovIeiZZRNHkctGA/\"\ndata <- data.frame(number = 4, letter = \"D\")\nsheet_append(sheet_id, data)\nread_sheet(sheet_id)"},{"path":"data.html","id":"make-a-new-sheet","chapter":"6 Reading and saving data","heading":"6.2.3 Make a new sheet","text":"can set new Google Sheet code. need sheet use Shiny app, need save sheet ID. specify tab name(s), sheet created one tab called \"Sheet1\". recommend making one sheet per app saving table separate tab.Include ID top app like :","code":"\nid <- gs4_create(\"demo2\", sheets = c(\"demographics\", \"questionnaire\"))\nid## Spreadsheet name: demo2\n##               ID: 1UXoGnF0UmV8fdBt4nRFwTKXkyovX8yYqmY4SYYOmjiM\n##           Locale: en_US\n##        Time zone: Europe/London\n##      # of sheets: 2\n## \n##  (Sheet name): (Nominal extent in rows x columns)\n##  demographics: 1000 x 26\n## questionnaire: 1000 x 26SHEET_ID "},{"path":"data.html","id":"add-data","chapter":"6 Reading and saving data","heading":"6.2.4 Add data","text":"can add empty data structure sheet specifying data types column like :can populate table starting data.Notice birthyear double, integer. Google Sheets one numeric type, doubles integers coerced doubles.","code":"\ndata <- data.frame(\n  name = character(0),\n  birthyear = integer(0),\n  R_user = logical(0),\n  score = double(0)\n)\n\nwrite_sheet(data, SHEET_ID, \"demographics\")\nread_sheet(SHEET_ID, \"demographics\") %>% names()## [1] \"name\"      \"birthyear\" \"R_user\"    \"score\"\ndata <- data.frame(\n  name = \"Lisa\",\n  birthyear = 1976L,\n  R_user = TRUE,\n  score = 10.2\n)\n\nwrite_sheet(data, SHEET_ID, \"demographics\")\nread_sheet(SHEET_ID, \"demographics\")"},{"path":"data.html","id":"appending-data","chapter":"6 Reading and saving data","heading":"6.2.5 Appending data","text":"can append new rows data sheet.try append data different data type, weird things can happen. Logical values added numeric column cast 0 (1) 1 (TRUE), numeric values added logical column change column numeric. mix character numeric values column, resulting column column one-item lists list can appropriate data type. (Data frames R mix data types column.)must append data number order columns Google Sheet. send columns order, recorded order sent , order column names. send extra columns, append fail.demo app \"radiotables\" safer version sheet_append() can use developing machine. defined scripts/gs4.R. version gracefully handles data new columns, missing columns, columns different order, columns different data type. However, reads whole data sheet deciding whether append overwrite data, can slow app, best used development changing things lot. running locally, uses original googlesheets4::sheet_append() function instead.","code":"\ndata <- data.frame(\n  name = \"Robbie\",\n  birthyear = 2007,\n  R_user = FALSE,\n  score = 12.1\n)\n\nsheet_append(SHEET_ID, data, \"demographics\")\nread_sheet(SHEET_ID, \"demographics\")\ndata <- data.frame(\n  name = 1,\n  birthyear = FALSE,\n  R_user = 0,\n  score = \"No\"\n)\n\nsheet_append(SHEET_ID, data, \"demographics\")\nread_sheet(SHEET_ID, \"demographics\")"},{"path":"data.html","id":"gs4_save","chapter":"6 Reading and saving data","heading":"6.2.6 Saving data","text":"mix data types column, data frame returned read_sheet() list columns mixed columns. Dates can also get written different ways look print console, mix characters doubles, convert strings like can save CSV.demo app \"radiotables\" custom function gs4_write_csv() defined scripts/gs4.R .","code":"\nstring_data <- lapply(data, sapply, toString) %>% as.data.frame()\nreadr::write_csv(string_data, \"data.csv\")"},{"path":"data.html","id":"exercises-data","chapter":"6 Reading and saving data","heading":"6.3 Exercises","text":"","code":""},{"path":"data.html","id":"read-others-data","chapter":"6 Reading and saving data","heading":"Read others' data","text":"Read data public google sheet https://docs.google.com/spreadsheets/d/1QjpRZPNOOL0pfRO6IVT5WiafnyNdahsch1A03iHdv7s/. Find sheet ID figure sheet data US states (assign object states) data Eutherian mammals (assign mammals).","code":"\nlibrary(googlesheets4)\n\ngs4_deauth()\n\nsheet_url <- \"https://docs.google.com/spreadsheets/d/1QjpRZPNOOL0pfRO6IVT5WiafnyNdahsch1A03iHdv7s/\"\nsheet_id <- as_sheets_id(sheet_url)\n\nstates <- read_sheet(sheet_id, 1)\nmammals <- read_sheet(sheet_id, 2)"},{"path":"data.html","id":"read-your-own-data","chapter":"6 Reading and saving data","heading":"Read your own data","text":"Create google sheet online read contents R. need either make public first (click green Share icon upper right) authorise googlesheets access account.","code":"\ngs4_auth()\nmy_sheet_url <- \"\"\nmydata <- read_sheet(my_sheet_url)"},{"path":"data.html","id":"write-data","chapter":"6 Reading and saving data","heading":"Write data","text":"Append data google sheet.","code":""},{"path":"data.html","id":"your-app-data","chapter":"6 Reading and saving data","heading":"6.4 Your App","text":"app developing, determine data need saved set google sheet (local data trouble google). Add authorisation code app (see scripts/gs4.R radiotables demo). Write server function save data app action button pressed.","code":""},{"path":"web.html","id":"web","chapter":"7 HTML, CSS, and JavaScript","heading":"7 HTML, CSS, and JavaScript","text":"need know anything HTML, CSS JavaScript make basic Shiny apps, little knowledge can really help customise apps. chapter cover basics enough vocabulary get started.","code":""},{"path":"web.html","id":"html","chapter":"7 HTML, CSS, and JavaScript","heading":"7.1 HTML","text":"HTML stands Hyper-Text Markup Language, system semantically tagging structure information web pages. term \"semantically\" important ; HTML tell something , display (handled CSS). separation helps apps accessible people use screen readers.","code":""},{"path":"web.html","id":"html-tags","chapter":"7 HTML, CSS, and JavaScript","heading":"7.1.1 HTML Tags","text":"learned tags() function Chapter 1 linked HTML tags. example, R code tags$h2(\"Methods\") creates HTML <h2>Methods<\/h2>. surrounds text content starting tag (<h2>) ending tag (<\/h2>).Tags create elements, can thought kind like boxes. element can contain one elements. Elements can attributes provide information element's id class, can used CSS JavaScript refer element group elements.example, following code creates unordered list (<ul>) class \"animals\". contains three list item elements (<li>), id class.seldom write HTML directly Shiny, experience HTML, can sometimes easier create something HTML relevant Shiny functions. example, code Shiny :Alternatively, can use HTML() include raw HTML ui function.","code":"<ul class=\"animals\">\n    <li class=\"mammal\" id=\"aardvark\" >Aardvarks<\/li>\n    <li class=\"insect\" id=\"bee\">Bees<\/li>\n    <li class=\"mammal\" id=\"capybara\">Capybaras<\/li>\n<\/ul>\ntags$ul(\n  class = \"animals\",\n  tags$li(\"Aardvark\", class = \"mammal\", id = \"aardvark\"),\n  tags$li(\"Bee\", class = \"insect\", id = \"bee\"),\n  tags$li(\"Capybara\", class = \"mammal\", id = \"capybara\")\n)\nHTML('<ul class=\"animals\">\n    <li class=\"mammal\" id=\"aardvark\" >Aardvarks<\/li>\n    <li class=\"insect\" id=\"bee\">Bees<\/li>\n    <li class=\"mammal\" id=\"capybara\">Capybaras<\/li>\n<\/ul>')"},{"path":"web.html","id":"viewing-html","chapter":"7 HTML, CSS, and JavaScript","heading":"7.1.2 Viewing HTML","text":"main reason learn little HTML can help customise appearance Shiny apps using CSS behaviour using JavaScript.Often, need find refer specific element group elements created shiny ui function. example, obvious refer sidebar tab \"demo_tab\" following code:open resulting app web browser, right click page, choose View Page Source, (eventually) find code created HTML .Now know dragon icon made italics tag (<>) inside anchor (<>) id #shiny-tab-demo_tab. Therefore, can change colour icon using following CSS:can tricky find code looking , developer tools can help. use FireFox Developer Edition developing web apps, Chrome also developer tools. FireFox, go Tools > Browser Tools > Web Developer Tools (opt-cmd-). Chrome, go View > Developer > Developer Tools (opt-cmd-). can dock tools bottom, right , left window, separate window.Open Inspector (FireFox) Elements (Chrome) tab tools click icon looks like arrow pointing box. hover parts web page, now see boxes outlining element. can click element highlight HTML tools.\nFigure 7.1: Viewing HTML inspector.\n","code":"\nsidebarMenu(\n    id = \"tabs\",\n    menuItem(\"Tab Title\", tabName = \"demo_tab\", icon = icon(\"dragon\"))\n)<ul class=\"sidebar-menu\">\n  <li>\n    <a href=\"#shiny-tab-demo_tab\" data-toggle=\"tab\" data-value=\"demo_tab\">\n      <i class=\"fa fa-dragon\" role=\"presentation\" aria-label=\"dragon icon\"><\/i>\n      <span>Tab Title<\/span>\n    <\/a>\n  <\/li>\n  <div id=\"tabs\" class=\"sidebarMenuSelectedTabItem\" data-value=\"null\"><\/div>\n<\/ul>#shiny-tab-demo_tab i { color: red; }"},{"path":"web.html","id":"CSS","chapter":"7 HTML, CSS, and JavaScript","heading":"7.2 CSS","text":"CSS stands Cascading Style Sheets way control visual presentation HTML web pages. can use CSS change default appearance anything web page.","code":""},{"path":"web.html","id":"css-basics","chapter":"7 HTML, CSS, and JavaScript","heading":"7.2.1 CSS Basics","text":"CSS structured follows:Selectors refer parts HTML want style. dozens selectors can get complex. focus basic examples .Properties aspects visual style want change, color (text color), background-color, border. Values specific formats property, \"1px\" \"0.5em\" describe lengths, red #FF0000 describe colours.hundreds properties memorise . usually Google something like \"css font type\" \"css underline text\" choose first link ww3schools.example, HTML looks like :can refer different parts list many ways:","code":"selector { property: value; }<ul class=\"animals\">\n    <li class=\"mammal\" id=\"aardvark\" >Aardvarks<\/li>\n    <li class=\"insect\" id=\"bee\">Bees<\/li>\n    <li class=\"mammal\" id=\"capybara\">Capybaras<\/li>\n<\/ul>"},{"path":"web.html","id":"styling-a-single-element","chapter":"7 HTML, CSS, and JavaScript","heading":"7.2.2 Styling a single element","text":"can add styles elements make shiny ui functions adding argument called style. need give class id way, inefficient styling many related elements way.","code":"\ntags$ul(\n  style = \"width: 10em;\",\n  tags$li(\"Aardvark\"),\n  tags$li(\"Bee\", style = \"background-color: yellow;\"),\n  tags$li(\"Capybara\")\n)"},{"path":"web.html","id":"inline-css","chapter":"7 HTML, CSS, and JavaScript","heading":"7.2.3 Inline CSS","text":"can add CSS app inside header using style tag. code makes element class \"animal\" \"10em\" width (em unit size proportional text size). also makes element id \"bee\" italic gives black background-color yellow text color. element list item, makes marker bee emoji.\nAardvarks\n\nBees\n\nCapybaras\n","code":"\nmystyle <- '\n  .animal { width: 10em; }\n  #bee {\n    font-style: italic; \n    color: yellow;\n    background-color: black;\n  }\n  li#bee::marker { content: \"🐝 \"; }\n'\n\nui <- fluidPage(tags$head(tags$style(mystyle)),\n                tags$ul(\n                  class = \"animals\",\n                  tags$li(\"Aardvark\", class = \"mammal\", id = \"aardvark\"),\n                  tags$li(\"Bee\", class = \"insect\", id = \"bee\"),\n                  tags$li(\"Capybara\", class = \"mammal\", id = \"capybara\")\n                ))"},{"path":"web.html","id":"external-css","chapter":"7 HTML, CSS, and JavaScript","heading":"7.2.4 External CSS","text":"anything longer lines, can see can get tedious. can put CSS external file reference header instead using tags$link(). CSS file needs inside www directory let Shiny know meant included like . template using class comes CSS file called www/custom.css.Sometimes change external files, seem update test app. can caching. can usually solve reloading app web browser, reloading web browser shift key pressed, stopping app running RStudio stop sign icon starting , , finally, restarting R.","code":"\ntags$head(\n  tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"custom.css\")\n)"},{"path":"web.html","id":"JavaScript","chapter":"7 HTML, CSS, and JavaScript","heading":"7.3 JavaScript","text":"JavaScript coding language useful adding dynamic behaviour web pages. simple apps, need understand JavaScript, little bit can really helpful adding advanced behaviour.","code":""},{"path":"web.html","id":"shinyjs","chapter":"7 HTML, CSS, and JavaScript","heading":"7.3.1 shinyjs","text":"R package shinyjs provides several ways work JavaScript Shiny app. order set server function can use shinyjs function, need add shinyjs::useShinyjs() somewhere ui function.list shinyjs functions find useful (id refers element specified ID):hide(id): hide elementshow(id): show elementtoggle(id): change visibility element (hide visible, show )alert(text): create alert popup; useful debuggingaddClass(id, class): adds CSS class elementremoveClass(id, class): removes CSS class elementclick(id): simulates click action buttondisable(id): disable inputenable(id): enables inputreset(id): resets input (much easier update* functions)","code":""},{"path":"web.html","id":"external-js","chapter":"7 HTML, CSS, and JavaScript","heading":"7.3.2 External JS","text":"anything complicated, best put JavaScript external file www directory. can include link script header. template using class comes JavaScript file called www/custom.js.Shiny apps use jQuery, framework making JavaScript easier write. lets refer elements using CSS selectors.example code www/custom.js file basic template.JavaScript similar R ways, maddeningly different others. One big difference lines code end semi-colon.code , function $(document).(\"shiny:connected\", function() { ... }) jQuery shorthand making sure code inside run whole webpage downloaded extra javascript shiny available. Otherwise, might try run code references element created yet (HTML pages always download one go) uses Shiny javascript function available yet.create new function called shiny_size(), creates two new Shiny input variables, \"window_width\" \"window_height\", sets values window dimensions (pixels). line window.onresize = shiny_size; sets function run every time window resized function run start initialise values.javaScript function Shiny.setInputValue(input_id, value) way communicate things happen web page Shiny app changing creating inputs. can use inside server() , example, change plot style input$window_width < 600.","code":"\ntags$head(\n  tags$script(src = \"custom.js\")\n)$(document).on(\"shiny:connected\", function() {\n  // send window width to shiny\n  shiny_size = function() {\n    Shiny.setInputValue(\"window_width\", window.innerWidth);\n    Shiny.setInputValue(\"window_height\", window.innerHeight);\n  }\n  \n  window.onresize = shiny_size;\n  shiny_size(); // trigger once at start\n})"},{"path":"web.html","id":"resources-web","chapter":"7 HTML, CSS, and JavaScript","heading":"7.4 Further Resources","text":"W3 Schools HTML TutorialUsing Custom CSS AppCSS Selectors ReferencePackaging JavaScript Code ShinyCommunicating Shiny via JavaScriptW3 Schools jQuery TutorialCodeacademy interactive tutorials","code":""},{"path":"web.html","id":"exercises-web","chapter":"7 HTML, CSS, and JavaScript","heading":"7.5 Exercises","text":"Clone basic template exercises.","code":""},{"path":"web.html","id":"add-html","chapter":"7 HTML, CSS, and JavaScript","heading":"Add HTML","text":"Add following HTML image demo_tab using `HTML():Since HTML double quotes , either need escape surround string single quotes instead.","code":"<p class=\"help\">For more help, you can go to <a href=\"https://shiny.rstudio.com/articles/html-tags.html\">Customize your UI with HTML<\/a>.<\/p>\ndemo_tab <- tabItem(\n  tabName = \"demo_tab\",\n  HTML(\n    '<p class=\"help\">For more help, you can go to <a href=\"https://shiny.rstudio.com/articles/html-tags.html\">Customize your UI with HTML<\/a>.<\/p>'\n  ),\n  imageOutput(\"logo\")\n)"},{"path":"web.html","id":"class-html","chapter":"7 HTML, CSS, and JavaScript","heading":"Class HTML","text":"Add unordered list paragraph contains following text links:Tags GlossaryHTML Tutorial","code":"\ndemo_tab <- tabItem(\n  tabName = \"demo_tab\",\n  HTML(\n    '<p class=\"help\">For more help, you can go to <a href=\"https://shiny.rstudio.com/articles/html-tags.html\">Customize your UI with HTML<\/a>.<\/p>'\n  ),\n  tags$ul(tags$li(\n    tags$a(href = \"https://shiny.rstudio.com/articles/tag-glossary.html\", \"Tags Glossary\")\n  ),\n  tags$li(\n    tags$a(href = \"https://www.w3schools.com/html/\", \"HTML Tutorial\")\n  )),\n  imageOutput(\"logo\")\n)"},{"path":"web.html","id":"style-links","chapter":"7 HTML, CSS, and JavaScript","heading":"Style links","text":"Change style links make hotpink. Use inline CSS method. bonus, change colour links hover , .","code":"\ntags$head(\n  tags$style(\"a { color: hotpink; }\n              a:hover { color: red; }\")\n)"},{"path":"web.html","id":"style-a-single-link-directly","chapter":"7 HTML, CSS, and JavaScript","heading":"Style a single link directly","text":"Change style just first link list make green.","code":"\ntags$ul(\n        tags$li(tags$a(href = \"https://shiny.rstudio.com/articles/tag-glossary.html\", \"Tags Glossary\"), style=\"color: green;\"),\n        tags$li(tags$a(href = \"https://www.w3schools.com/html/\", \"HTML Tutorial\"))\n    )"},{"path":"web.html","id":"external-css-1","chapter":"7 HTML, CSS, and JavaScript","heading":"External CSS","text":"Change style just links inside paragraphs class \"help\" underline. Use external CSS.Add following www/custom.css:","code":".help a { text-decoration: underline; }"},{"path":"web.html","id":"your-app-web","chapter":"7 HTML, CSS, and JavaScript","heading":"7.6 Your App","text":"Add new styles www/custom.css custom app. See can figure change aspects default interface bug .","code":""},{"path":"structure.html","id":"structure","chapter":"8 Structuring a complex app","heading":"8 Structuring a complex app","text":"far, mostly structuring app entirely app.R file, apart web helper files CSS JavaScript. However, apps start getting relatively complex, might find easier move code external .R files using source() include . things watch .","code":""},{"path":"structure.html","id":"external-server-functions","chapter":"8 Structuring a complex app","heading":"8.1 External Server Functions","text":"can define functions want use app top app.R file, can make file difficult parse pretty quickly. basic template includes external functions line:file contains definitions functions debug_msg() debug_sprintf(). can add custom functions file another file source separately..R files inside directory called R run app starts , even source app. can use set functions app needs without use source(), prefer explicitly include external files, keep external functions directory called scripts.","code":"\nsource(\"scripts/func.R\") # helper functions"},{"path":"structure.html","id":"sourcing-locally","chapter":"8 Structuring a complex app","heading":"8.1.1 Sourcing Locally","text":"can tricky use shiny functions external files. example, just move contents server() external file called scripts/logo.R source file like :get error like: \"Error output$logo <- renderImage({ : object 'output' found\". input output objects work like expect inside server()However, can source external code inside server() setting local argument TRUE.might find useful break parts server logic big app separate files like , common keep code uses reactive functions inside server() app.R file, move large sections code inside functions externally defined functions.example, define function logo_image() external file scripts/logo.R like :following app.R file keeps reactive function renderImage() inside server(), lets reduce number lines code.","code":"\nserver <- function(input, output, session) {\n    source(\"scripts/logo.R\")\n} \nserver <- function(input, output, session) {\n    source(\"scripts/logo.R\", local = TRUE)\n} \nlogo_image() <- function() {\n  list(src = \"www/img/shinyintro.png\",\n       width = \"300px\",\n       height = \"300px\",\n       alt = \"ShinyIntro hex logo\")\n}\nsource(\"scripts/logo.R\")\n\nserver <- function(input, output, session) {\n    source(\"scripts/logo.R\", local = TRUE)\n    output$logo <- renderImage(logo_image(), deleteFile = FALSE)\n} "},{"path":"structure.html","id":"inputs-and-outputs","chapter":"8 Structuring a complex app","heading":"8.1.2 Inputs and Outputs","text":"objects input output available default externally defined functions. add action button ui app, actionButton(\"change\", \"Change Image\"), change logo_image() function returns ShinyIntro logo odd-numbered clicks change button, psyTeachR logo even-numbered clicks.try run , get error message like, \"Error logo_image: object 'input' found\". external function access reactive objects like input, output, session, reactiveValues().best solution pass variables function need. circumstances, can pass whole input object, seldom necessary., change logo_image() take single argument called change replace input$change argument.just pass value input$change logo_image() inside renderImage(), input object available.worry much making lot sense yet. main thing want take away section try move server code external files, might get errors (frequently ). hope remind lesson better idea start looking solution.","code":"\nlogo_image <- function() {\n  odd_clicks <- input$change%%2 == 1\n  src <- ifelse(odd_clicks, \n                \"www/img/shinyintro.png\", \n                \"www/img/psyteachr.png\")\n  \n  list(src = src,\n       width = \"300px\",\n       height = \"300px\",\n       alt = \"ShinyIntro hex logo\")\n}\nlogo_image <- function(change) {\n  odd_clicks <- change%%2 == 1\n  src <- ifelse(odd_clicks, \n                \"www/img/shinyintro.png\", \n                \"www/img/psyteachr.png\")\n  \n  list(src = src,\n       width = \"300px\",\n       height = \"300px\",\n       alt = \"ShinyIntro hex logo\")\n}\nserver <- function(input, output, session) {\n    output$logo <- renderImage({\n        logo_image(input$change)\n    }, deleteFile = FALSE)\n} "},{"path":"structure.html","id":"external-ui-files","chapter":"8 Structuring a complex app","heading":"8.2 External UI Files","text":"Defining complex UI can challenging. basic template uses pattern find helpful apps multiple tab items. assign tab object include tabs app dashboardBody() like :simple app, can define tabs app.R just define ui. can components ui, dashboardHeader() dashboardSidebar(). sections start getting complex, can move external files source .","code":"\ntabItems(\n    intro_tab,\n    questionnaire_tab,\n    feedback_tab,\n    info_tab\n)"},{"path":"structure.html","id":"ui-lists","chapter":"8 Structuring a complex app","heading":"8.2.1 UI Lists","text":"parts UI repeat can created programmatically instead manually, can use apply() map() functions create list UI components. can little tricky figure add list components UI, can accomplished .call().example programatically create select inputs categorical column starwars dataset dplyr add box().","code":"\n# get the categorical columns\ncol_is_char <- sapply(starwars, is.character)\ncategorical_cols <- names(starwars)[col_is_char]\n\n# set up the selectInputs\nselect_inputs <- lapply(categorical_cols, function(col) {\n  unique_vals <- unique(starwars[[col]])\n  \n  selectInput(inputId = col, label = col, choices = unique_vals)\n})\n\n# add container arguments to select_inputs \nselect_inputs$title = \"Select the Categories\"\nselect_inputs$solidHeader = TRUE\nselect_inputs$width = 4\n\n# add to container\nselect_box <- do.call(box, select_inputs)"},{"path":"structure.html","id":"exercises-structure","chapter":"8 Structuring a complex app","heading":"8.3 Exercises","text":"","code":""},{"path":"structure.html","id":"ui-1","chapter":"8 Structuring a complex app","heading":"UI","text":"Clone reactive_demo, move boxes ui external file, source .","code":""},{"path":"structure.html","id":"server","chapter":"8 Structuring a complex app","heading":"Server","text":"Make custom function scripts/func.R creates plot. Use server().","code":""},{"path":"structure.html","id":"your-app-structure","chapter":"8 Structuring a complex app","heading":"8.4 Your App","text":"app developing, see long functions inside reactive functions server() can moved scripts/func.R another external file. Move tab external file source app.R.","code":""},{"path":"debugging.html","id":"debugging","chapter":"9 Debugging and error handling","heading":"9 Debugging and error handling","text":"Bugs part coding. great coder someone writes bug-free code first try (unachievable goal), rather someone knows efficiently catch bugs. section presents simple ways debug Shiny app.","code":""},{"path":"debugging.html","id":"rstudio-console-messages","chapter":"9 Debugging and error handling","heading":"9.1 RStudio Console Messages","text":"Sending messages console simple way debug code.like keep track functions called starting every function inside server function message. template includes custom message logging function helps use development deployed apps: debug_msg().example, code prints \"questionnaire submitted\" every time action button q_submit pressed. prints javascript console also RStudio console developing.","code":"\n# display debugging messages in R (if local) \n# and in the console log (if running in shiny)\ndebug_msg <- function(...) {\n  is_local <- Sys.getenv('SHINY_PORT') == \"\"\n  in_shiny <- !is.null(shiny::getDefaultReactiveDomain())\n  txt <- toString(list(...))\n  if (is_local) message(txt)\n  if (in_shiny) shinyjs::runjs(sprintf(\"console.debug(\\\"%s\\\")\", txt))\n}\nobserveEvent(input$q_submit, {\n  debug_msg(\"questionnaire submitted\")\n  # rest of code ...\n})"},{"path":"debugging.html","id":"javascript-console","chapter":"9 Debugging and error handling","heading":"9.2 JavaScript Console","text":"use FireFox Developer Edition developing web apps, Chrome also developer tools. FireFox, go Tools > Browser Tools > Web Developer Tools (opt-cmd-). Chrome, go View > Developer > Developer Tools (opt-cmd-). can dock tools bottom, right , left window, separate window.\nFigure 9.1: Javascript consoles FireFox Developer Edition Chrome.\nShiny puts lot info care logs, debug_msg() writes messages debug console. can filter just messages choosing Debug FireFox Verbose Chrome.","code":""},{"path":"debugging.html","id":"showcase-mode","chapter":"9 Debugging and error handling","heading":"9.3 Showcase Mode","text":"can view app showcase mode setting \"DisplayMode\" \"Showcase\" (instead \"Normal\") DESCRIPTION file app directory. mode, can see app code, css files, javascript files. functions server() highlight yellow time run. However, much help many functions external files using modules. Also, script long, able see highlighting unless scrolled right section, find straightforward use message method described .\nFigure 9.2: Showcase mode.\n","code":"Title: Questionnaire Template\nAuthor: Lisa DeBruine\nLicense: CC-BY-4.0\nDisplayMode: Showcase\nType: Shiny"},{"path":"debugging.html","id":"trycatch","chapter":"9 Debugging and error handling","heading":"9.4 tryCatch","text":"probably experienced greyed screen crashed app enough now. development, next step look console see warning error message. lucky, can figure code happening (easier start functions debug message) fix .However, sometimes errors difficult prevent. example, can try restrict inputs users enter numeric values using numericInput(), many browsers let enter text values anyways (cause value NA). avoid crashing whole app, can wrap potentially error-triggering code tryCatch().example, code cause error add number letter.following code tries run code inside curly brackets ({}), creates error, error function run. object e error object, can print message using debug_msg() (crash app).return value error message value assigned sum error. Sometimes make sense default value, code checking return value. case, can just put code inside brackets return anything error function.","code":"\ninput <- list(n1 = 10, n2 = \"A\")\n\nsum <- input$n1 + input$n2## Error in input$n1 + input$n2: non-numeric argument to binary operator\nsum <- tryCatch({\n  input$n1 + input$n2\n}, error = function(e) {\n  debug_msg(e$message)\n  return(0)\n})\ntryCatch({\n  sum <- input$n1 + input$n2\n  output$sum <- renderText(sum)\n}, error = function(e) {\n  debug_msg(e$message)\n})"},{"path":"debugging.html","id":"input-checking","chapter":"9 Debugging and error handling","heading":"9.5 Input Checking","text":"user might frustrated made mistake causes error know . can help prevent errors make experience using app nicer input checking sending users useful messages.","code":""},{"path":"debugging.html","id":"modal-dialogs","chapter":"9 Debugging and error handling","heading":"9.5.1 Modal Dialogs","text":"One method check input values, generate appropriate error message anything wrong, show message modalDialog().","code":"\nobserveEvent(input$submit, {\n  # check inputs\n  input_error <- dplyr::case_when(\n    !is.numeric(input$n1) ~ \"N1 needs to be a number\",\n    !is.numeric(input$n2) ~ \"N2 needs to be a number\",\n    TRUE ~ \"\"\n  )\n  if (input_error != \"\") {\n    showModal(modalDialog(\n      title = \"input_error\",\n      input_error,\n      easyClose = TRUE\n    ))\n    return() # exit the function here\n  }\n  \n  # no input errors\n    sum <- input$n1 + input$n2\n    add_text <- sprintf(\"%d + %d = %d\", input$n1, input$n2, sum)\n    output$n1_plus_n2 <- renderText(add_text)\n})"},{"path":"debugging.html","id":"validate","chapter":"9 Debugging and error handling","heading":"9.5.2 Validate","text":"can also use validate() need() test required inputs output. However, works inside render function reactive function called inside render function. prefer make pop-messages like , work type function.","code":"\nserver <- function(input, output) {\n  add_text <- reactive({\n    input$add # triggers reactive\n    n1 <- isolate(input$n1)\n    n2 <- isolate(input$n2)\n    validate(\n      need(!is.na(n1), \"The first value must a number\"),\n      need(!is.na(n2), \"The second value must a number\")\n    )\n    \n    sprintf(\"%d + %d = %d\", n1, n2, n1 + n2)\n  })\n\n  output$n1_plus_n2 <- renderText(add_text())\n}"},{"path":"debugging.html","id":"resources-debugging","chapter":"9 Debugging and error handling","heading":"9.6 Further Resources","text":"Debugging Shiny applicationsreactlogWrite error messages UI validate","code":""},{"path":"debugging.html","id":"exercises-debugging","chapter":"9 Debugging and error handling","heading":"9.7 Exercises","text":"","code":""},{"path":"debugging.html","id":"required-selections","chapter":"9 Debugging and error handling","heading":"Required selections","text":"Write app creates plot checked values checkboxGroupInput() lists orders msleep.Add error checking app deal happens input$order selections.","code":"\n# this input is just an example for testing the code below\ninput <- list(orders = c(\"Carnivora\", \"Chiroptera\", \"Primates\"))\n# input <- list(orders = c()) # check this to see what happens with no selections\n\nfiltered_data <- dplyr::filter(msleep, order %in% input$orders)\n\nggplot(filtered_data, aes(x = sleep_total, fill = order)) +\n  geom_histogram(binwidth = 1) +\n  facet_wrap(~order)"},{"path":"debugging.html","id":"your-app-debugging","chapter":"9 Debugging and error handling","heading":"9.8 Your App","text":"app developing, add debug_msg() messages start reactive functions. Run app look Rstudio console JavaScript console outputs.Find anywhere user enter invalid information cause error add way handle .","code":""},{"path":"contingency.html","id":"contingency","chapter":"10 Contingent Display","heading":"10 Contingent Display","text":"\nFigure 10.1: Contingency Demo App. can also access app shinyintro::app(\"contingency_demo\")view separate tab showcase interface.\n","code":""},{"path":"contingency.html","id":"hide-and-show","chapter":"10 Contingent Display","heading":"10.1 Hide and Show","text":"frequently want make aspect shiny app contingent state another aspect, showing text input value select input \"\". can use hide() show() functions shinyjs accomplish easily.set UI, wrap elements hidden start hidden().set hide show logic server().","code":"\n# in the ui\nbox(title = \"Questions\",\n    solidHeader = TRUE,\n    selectInput(\"first_pet\", \"What was your first pet?\", \n                c(\"\", \"dog\", \"cat\", \"ferret\", \"other\")),\n    hidden(textInput(\"first_pet_other\", NULL, \n                     placeholder = \"Specify the other pet\"))\n)\n# in the server\nobserveEvent(input$first_pet, {\n    if (input$first_pet == \"other\") {\n        show(\"first_pet_other\")\n    } else {\n        hide(\"first_pet_other\")\n    }\n})"},{"path":"contingency.html","id":"groups","chapter":"10 Contingent Display","heading":"10.1.1 Groups","text":"Sometimes need hide show group elements, depending something else. can wrap grouped elements div tag id hide show id.example, make sense show questions someone never pet. Add selectInput() previous two questions, wrap questions tags$div() id \"first_pet_grp\"add following code server function hide show first_pet_grp depending value had_pet. server code take care whether first_pet_other visible.Try figure go wrong wrap \"first_pet\" \"first_pet_other\" group, instead just hid showed \"first_pet\" \"first_pet_other\" depending value has_pet?","code":"\n# replace in ui\nbox(\n  title = \"Questions\",\n  solidHeader = TRUE,\n  selectInput(\"had_pet\", \"Have you ever had a pet?\", c(\"\", \"Yes\", \"No\")),\n  hidden(tags$div(\n    id = \"first_pet_grp\",\n    selectInput(\"first_pet\", \"What was your first pet?\",\n                c(\"\", \"dog\", \"cat\", \"ferret\", \"other\")),\n    textInput(\"first_pet_other\", NULL,\n              placeholder = \"Specify the other pet\")\n  ))\n)\n# add to server\nobserveEvent(input$had_pet, {\n  if (input$had_pet == \"Yes\") {\n    show(\"first_pet_grp\")\n  } else {\n    hide(\"first_pet_grp\")\n  }\n})"},{"path":"contingency.html","id":"toggle","chapter":"10 Contingent Display","heading":"10.1.2 Toggle","text":"Sometimes need change visibility element something happens, rather specifically hide show . can use toggle() hide element visible show hidden.Add actionButton() sidebar menu (inside box) give box id \"pet_box\". element might want refer code needs id.Now, whenever click \"toggle_pet_box\" button, contents \"pet_box\" toggle visibility.go wrong put button inside box?","code":"\n# add to ui\nactionButton(\"toggle_pet_box\", \"Toggle Pet Questions\")\n# add to server\nobserveEvent(input$toggle_pet_box, {\n  toggle(\"pet_box\")\n})"},{"path":"contingency.html","id":"changing-styles","chapter":"10 Contingent Display","heading":"10.2 Changing Styles","text":"can use addClass(), removeClass(), toggleClass() change element classes. usually want classes defined .Add following style www/custom.css file.add box ui:code adds class \"notice-\" paragraph element \"notice_text\" whenever \"add_notice\" button pressed.Guess use removeClass(), toggleClass() buttons set .","code":".notice-me {\n  color: red;\n  text-decoration: underline;\n  font-weight: 800;\n}\nbox(title = \"Notice\", solidHeader = TRUE,\n    p(id = \"notice_text\", \"Please pay attention to this text.\"),\n    actionButton(\"add_notice\", \"Notice Me\"),\n    actionButton(\"remove_notice\", \"Ignore Me\"),\n    actionButton(\"toggle_notice\", \"Toggle Me\")\n)\nobserveEvent(input$add_notice, {\n  addClass(\"notice_text\", \"notice-me\")\n})"},{"path":"contingency.html","id":"changing-non-shiny-elements","chapter":"10 Contingent Display","heading":"10.2.1 Changing non-shiny elements","text":"Unfortunately, elements web page ID can altered addClass() removeClass(). example, skin shinydashboard app determined css class body element. However, can use runjs() run arbitrary JavaScript code.Add following action button sidebarMenu().jQuery code changes skin app button press removing possible skin-color classes adding random one.Changing skin color button press something easily find documented online materials. figured looking underlying html changed changed skin color app code. Hacks like require lots trial error, get easier understand html, css JavaScript.","code":"\nactionButton(\"random_skin\", \"Random Skin\")\nobserveEvent(input$random_skin, {\n  skins <- c(\"red\", \"yellow\", \"green\", \"blue\", \"purple\", \"black\")\n  skin_color <- sample(skins, 1)\n  \n  js <- sprintf(\"$('body').removeClass('%s').addClass('skin-%s');\",\n                paste(paste0(\"skin-\", skins), collapse = \" \"),\n                skin_color)\n  \n  shinyjs::runjs(js)\n})"},{"path":"contingency.html","id":"changing-input-options","chapter":"10 Contingent Display","heading":"10.3 Changing input options","text":"relevant options selectInput() radioButton() may change depending values inputs. Sometimes can accommodate creating multiple versions input hiding showing. times may wish update input directly.Add following box ui.First, set code display correct data table.Now need set options \"columns\" depending \"dataset\" selected.Finally, can add code select checked columns display.get dataset instead using data mydata()?Finally, alter reactive function show selected columns.happens unselect columns? can fix ?","code":"\nbox(title = \"Data\", solidHeader = TRUE, width = 12,\n  selectInput(\"dataset\", \"Choose a dataset\", c(\"mtcars\", \"sleep\")),\n  checkboxGroupInput(\"columns\", \"Select the columns to show\", inline = TRUE),\n  tableOutput(\"data_table\")\n)\nmydata <- reactive({\n  get(input$dataset, \"package:datasets\")\n})\n\noutput$data_table <- renderTable(mydata())\nobserve({\n  col_names <- names(data())\n  debug_msg(col_names)\n  updateCheckboxGroupInput(inputId = \"columns\",\n                           choices = col_names,\n                           selected = col_names)\n})\nobserve({\n  full_data <- get(input$dataset, \"package:datasets\")\n  col_names <- names(full_data)\n  updateCheckboxGroupInput(\n    inputId = \"columns\",\n    choices = col_names,\n    selected = col_names,\n    inline = TRUE\n  )\n})\nmydata <- reactive({\n  d <- get(input$dataset, \"package:datasets\")\n  d[input$columns]\n})"},{"path":"contingency.html","id":"resources-contingency","chapter":"10 Contingent Display","heading":"10.4 Further Resources","text":"Mastering Shiny: Packages: Dynamic UI","code":""},{"path":"contingency.html","id":"exercises-contingency","chapter":"10 Contingent Display","heading":"10.5 Exercises","text":"","code":""},{"path":"contingency.html","id":"filtered-data","chapter":"10 Contingent Display","heading":"Filtered data","text":"Create app use inputs filter dataset display table filtered dataset. example, msleep dataset, inputs select vore, order conservation. Since values exclude categories (e.g., omnivores order Cetacea), update available categories input values selected. Make sure way reset values.","code":""},{"path":"contingency.html","id":"your-app-contingency","chapter":"10 Contingent Display","heading":"10.6 Your App","text":"Check places app use contingency.","code":""},{"path":"sharing.html","id":"sharing","chapter":"11 Sharing your Apps","heading":"11 Sharing your Apps","text":"","code":""},{"path":"sharing.html","id":"shinyapps.io","chapter":"11 Sharing your Apps","heading":"11.1 shinyapps.io","text":"Open Tools > Global Options ...Go Publishing tabClick Connect button choose ShinyApps.ioClick link go accountClick Sign button Sign GitHubYou now shinyapps.io dashboard; click name upper right choose TokensAdd tokenClick Show next token copy text clipboard\nGo back RStudio paste text box click Connect AccountMake sure box next \"Enable publishing...\" ticked, click Apply, close options window\n˙\ncan test creating simple app. shinyintro package, use code .Open app.R file go File > Publish... menu (click blue icon upper right corner source pane). Make sure right files app, edit title want, click Publish. web browser window open seconds showing app online! can now share friends colleagues.publishing fails, check Console pane. already many apps shinyapps.io, see message, \"reached maximum number applications allowed account.\" can archive apps shinyapps.io dashboard problem.","code":"\nshinyintro::clone(\"input_demo\", \"mytestapp\")"},{"path":"sharing.html","id":"self-hosting-a-shiny-server","chapter":"11 Sharing your Apps","heading":"11.2 Self-hosting a shiny server","text":"Setting shiny server beyond scope class, access one, can ask administrator access correct directories upload app directories .solution good want save data locally want use Google Sheets. save data locally shinyapps.io.save data locally shiny server, may need change owner permissions directory save data web user can write . Ask administrator server help make sense .","code":""},{"path":"sharing.html","id":"github","chapter":"11 Sharing your Apps","heading":"11.3 GitHub","text":"GitHub great place organise share code using version control. can also use host Shiny app code others download run computer.See Appendix B instructions set git GitHub account. Set github access token usethis::create_github_token(). web browser open asked log GitHub account asked authorise new token. Accept defaults click OK bottom page. RStudio, run gitcreds::gitcreds_set() follow instructions save token., share app people use R, make project contains app.R file related files. already using version control project, make sure files saved type usethis::use_git() console. Choose Yes commit Yes restart R.Make new GitHub repository usethis::use_github(protocol=\"https\"); check suggested title description OK. choose affirmative response (always number), see messages web browser open github repository page.Now can share app others sending repository link. can access repository RStudio starting New Project... version control, using URL shown click green Code button repository page (something like \"https://github.com/account/repository.git\"). can run app way developing , opening app.R file clicking Run button.update files GitHub, need commit changes make using Git tab upper right pane. Click checkbox files want update, click Commit, write message explaining changes (publicly viewable GitHub, try professional, can use emojis 😱🤪😍).Committing just creates snapshot files computer can look previous versions. update files GitHub, need push updates using green arrow button.Git GitHub can tricky. Happy Git R Jenny Bryan fantastic -depth book anbout work git R RStudio.","code":""},{"path":"sharing.html","id":"in-an-r-package","chapter":"11 Sharing your Apps","heading":"11.4 In an R package","text":"can put app custom R package make even easier people run app. usethis package incredibly helpful setting packages.Copy apps want include package inst/apps directory.Now, create app function running usethis::edit_file(\"R/app.R\") copy following text app.R file just opened. Replace \"default_app\" directory name app want open user type name .Next, open DESCRIPTION file edit title, author description. Now run following code console.create help documentation package function install package computer. now able run app mypackagename::app().Set git save package GitHub share others:uploaded GitHub, people can install following code:","code":"\nmypackagename <- \"mypackagename\" # change this\nusethis::create_package(mypackagename)\nusethis::use_ccby_license()\n\n# add packages your app uses\nusethis::use_package(\"shiny\")\nusethis::use_package(\"shinydashboard\")\n\n# add the directory for your apps\ndir.create(\"inst\")\ndir.create(\"inst/apps\")\n#' Launch Shiny App\n#'\n#' @param name The name of the app to run\n#' @param ... arguments to pass to shiny::runApp\n#'\n#' @export\n#'\napp <- function(name = \"default_app\", ...) {\n  appDir <- system.file(paste0(\"apps/\", name), package = \"mypackagename\")\n  if (appDir == \"\") stop(\"The shiny app \", name, \" does not exist\")\n  shiny::runApp(appDir, ...)\n}\ndevtools::document()\ndevtools::install()\nusethis::use_git()\nusethis::use_github(protocol=\"https\")\ndevtools::install_github(\"myaccountname/mypackagename\")"},{"path":"sharing.html","id":"resources-sharing","chapter":"11 Sharing your Apps","heading":"11.5 Further Resources","text":"Mastering Shiny: PackagesHappy Git GitHub useR","code":""},{"path":"sharing.html","id":"exercises-sharing","chapter":"11 Sharing your Apps","heading":"11.6 Exercises","text":"","code":""},{"path":"sharing.html","id":"shinyapps.io-1","chapter":"11 Sharing your Apps","heading":"Shinyapps.io","text":"Upload cloned demo app shinyapps.ioCheck can access onlineArchive app shinyapps.io dashboard","code":""},{"path":"sharing.html","id":"github-1","chapter":"11 Sharing your Apps","heading":"GitHub","text":"Set GitHub accountCreate New Project RStudio version control using https://github.com/debruine/demoappCreate project contains demo app upload GitHub.","code":""},{"path":"sharing.html","id":"r-package","chapter":"11 Sharing your Apps","heading":"R Package","text":"Create R package demo app upload GitHub.","code":""},{"path":"sharing.html","id":"your-app-sharing","chapter":"11 Sharing your Apps","heading":"11.7 Your App","text":"users need access app? R users can download run computers? need find host online? Choose implement sharing method custom app. Send friend (instructor) directions access run .","code":""},{"path":"reports.html","id":"reports","chapter":"12 Customized reports","heading":"12 Customized reports","text":"best part Shiny apps interactivity, sometimes users need download data, images, static report. section show .\nFigure 12.1: Reports Demo App. can also access app shinyintro::app(\"reports_demo\")view separate tab showcase interface.\n","code":""},{"path":"reports.html","id":"download-data","chapter":"12 Customized reports","heading":"12.1 Download Data","text":"First, need add appropriate UI questionnaire app. Create new tab called \"report_tab\" two downloadButton()s, one pets data one food data.Remember add tabItems() dashboardBody() also add corresponding menuItem() sidebarMenu(). Run app make sure UI looks like expect proceed.Now need add code server() handle downloads. downloadButton() special type output handled downloadHandler(). function takes two arguments, function create filename function create content.Instead write.csv() readr::write_csv(), using gs4_write_csv() (defined scripts/gs4.R) googlesheets can return list columns cause errors saving CSV without preprocessing.","code":"\nreport_tab <- tabItem(\n  tabName = \"report_tab\",\n  box(\n    id = \"download_box\",\n    title = \"Downloads\",\n    solidHeader = TRUE,\n    downloadButton(\"pet_data_dl\", \"Pets Data\"),\n    downloadButton(\"food_data_dl\", \"Food Data\")\n  )\n)\n### pet_data_dl ----\noutput$pet_data_dl <- downloadHandler(\n  filename = function() {\n    debug_msg(\"pet_data_dl\")\n    paste0(\"pet-data_\", Sys.Date(), \".csv\")\n  },\n  content = function(file) {\n    gs4_write_csv(v$pet_summary_data, file)\n  }\n)"},{"path":"reports.html","id":"download-images","chapter":"12 Customized reports","heading":"12.2 Download Images","text":"Now need use summary plot one place, make sense build twice. Move code renderPlot() output$pet_summary reactive() called pet_summary_plot. can build plot whenever inputs change refer anywhere pet_summary_plot().downloadHandler() works downloading CSV file. can use ggsave() write plot.Add numeric inputs UI let user specify downloaded plot width height.","code":"\n### pet_summary_plot ----\npet_summary_plot <- reactive({ debug_msg(\"pet_summary_plot\")\n  # code from output$pet_summary ...\n})\n\n### pet_summary ----\noutput$pet_summary <- renderPlot({ debug_msg(\"pet_summary\")\n    pet_summary_plot()\n})\n# pet_plot_dl ----\noutput$pet_plot_dl <- downloadHandler(\n  filename = function() {\n    paste0(\"pet-plot_\", Sys.Date(), \".png\")\n  },\n  content = function(file) {\n    ggsave(file,\n           pet_summary_plot(),\n           width = 7,\n           height = 5)\n  }\n)\n# add to report_tab ui\nnumericInput(\"plot_width\", \"Plot Width (inches)\", 7, min = 1, max = 10)\nnumericInput(\"plot_height\", \"Plot Height (inches)\", 5, min = 1, max = 10)\n\n### pet_plot_dl ----\noutput$pet_plot_dl <- downloadHandler(\n  filename = function() {\n    debug_msg(\"pet_plot_dl\")\n    paste0(\"pet-plot_\", Sys.Date(), \".png\")\n  },\n  content = function(file) {\n    ggsave(\n      file,\n      pet_summary_plot(),\n      width = input$plot_width,\n      height = input$plot_height\n    )\n  }\n)"},{"path":"reports.html","id":"r-markdown","chapter":"12 Customized reports","heading":"12.3 R Markdown","text":"can render R Markdown report users download.First, need save R Markdown file (save one reports/report.Rmd). need set params info want pass Shiny app th YAML header. , dynamically update title, data, plot. can set values NULL another default value.can refer params R Markdown file params$name. knit report, take default values.content function uses rmarkdown::render() create output file Rmd. using html_document output type, can also render PDF Word document pandoc latex installed. Include title, data plot named list params argument.Setting envir argument new.env() makes sure settings Shiny app, default ggplot theme, affect rendered file, also makes R Markdown code access objects app, input v$summary_data, unless pass parameters.computer, need set intermediates_dir = tempdir(), need want deploy app shiny server. rmarkdown renders Rmd file, creates several intermediate files working directory deletes . permission write app's working directory computer, might shiny server. tempdir() almost always safe place write temporary files .","code":"---\ntitle: \"`r params$title`\"\ndate: \"`r format(Sys.time(), '%d %B, %Y')`\" \noutput: html_document\nparams:\n  title: Report\n  data: NULL\n  plot: NULL\n---\n\n\n```r\nn_responses <- nrow(params$data)\n\nn_sessions <- params$data$session_id %>%\n  unique() %>%\n  length()\n```\n\nWe asked people to rate how much they like pets. We have obtained `r n_responses` responses from `r n_sessions` unique sessions.\n\n## Summary Plot\n\n\n```r\nparams$plot\n```\n### pet_report_dl ----\noutput$pet_report_dl <- downloadHandler(\n  filename = function() {\n    debug_msg(\"pet_report_dl\")\n    paste0(\"pet-report_\", Sys.Date(), \".html\")\n  },\n  content = function(file) {\n    rmarkdown::render(\"reports/report.Rmd\",\n                      output_file = file, \n                      params = list(\n                        title = \"Pet Report\", \n                        data = v$pet_summary_data,\n                        plot = pet_summary_plot()\n                      ),\n                      envir = new.env(),\n                      intermediates_dir = tempdir())\n  }\n)"},{"path":"reports.html","id":"resources-reports","chapter":"12 Customized reports","heading":"12.4 Further Resources","text":"Mastering Shiny: Uploads DownloadsR MarkdownR Markdown: Definitive Guide","code":""},{"path":"reports.html","id":"exercises-reports","chapter":"12 Customized reports","heading":"12.5 Exercises","text":"","code":""},{"path":"reports.html","id":"food-data","chapter":"12 Customized reports","heading":"Food Data","text":"Create button downloads food data.","code":"\n# add to report_tab ui ----\ndownloadButton(\"food_data_dl\", \"Food Data\")\n\n### food_data_dl ----\noutput$food_data_dl <- downloadHandler(\n  filename = function() {\n    debug_msg(\"food_data_dl\")\n    paste0(\"food-data_\", Sys.Date(), \".csv\")\n  },\n  content = function(file) {\n    gs4_write_csv(v$food_summary_data, file)\n  }\n)"},{"path":"reports.html","id":"food-image","chapter":"12 Customized reports","heading":"Food Image","text":"Create button downloads food summary plot","code":"\n# add to report_tab ui ----\ndownloadButton(\"food_plot_dl\", \"Food Plot\")\n\n### food_summary_plot ----\nfood_summary_plot <- reactive({ debug_msg(\"food_summary_plot\")\n  # code from output$food_summary ...\n})\n\n### food_summary ----\noutput$food_summary <- renderPlot({ debug_msg(\"food_summary\")\n  food_summary_plot()\n})\n\n### food_plot_dl ----\noutput$food_plot_dl <- downloadHandler(\n  filename = function() {\n    debug_msg(\"food_plot_dl\")\n    paste0(\"food-plot_\", Sys.Date(), \".png\")\n  },\n  content = function(file) {\n    ggsave(\n      file,\n      food_summary_plot(),\n      width = input$plot_width,\n      height = input$plot_height\n    )\n  }\n)"},{"path":"reports.html","id":"food-report","chapter":"12 Customized reports","heading":"Food Report","text":"Create downloadable report food data.","code":"\n# add to report_tab ui ----\ndownloadButton(\"food_report_dl\", \"Food Report\")\n\n### food_report_dl ----\noutput$food_report_dl <- downloadHandler(\n  filename = function() {\n    debug_msg(\"food_report_dl\")\n    paste0(\"food-report_\", Sys.Date(), \".html\")\n  },\n  content = function(file) {\n    rmarkdown::render(\"reports/report.Rmd\",\n                      output_file = file, \n                      params = list(\n                        title = \"Food Report\", \n                        data = v$food_summary_data,\n                        plot = food_summary_plot()\n                      ),\n                      envir = new.env(),\n                      intermediates_dir = tempdir())\n  }\n)"},{"path":"reports.html","id":"your-app-reports","chapter":"12 Customized reports","heading":"12.6 Your app","text":"might users want download app? Include data, image, report download applicable app.","code":""},{"path":"modules.html","id":"modules","chapter":"13 Shiny modules for repeated structures","heading":"13 Shiny modules for repeated structures","text":"find making nearly identical UIs server functions app, might benefit modules. way define pattern use repeatedly.\nFigure 13.1: Modules Demo App. can also access app shinyintro::app(\"modules_demo\")view separate tab showcase interface.\n","code":""},{"path":"modules.html","id":"modularizing-the-ui","chapter":"13 Shiny modules for repeated structures","heading":"13.1 Modularizing the UI","text":"two tabPanels follow nearly identical patterns. can often identify place modules might useful use naming convention like \"{base}_{type}\" ids.first step modularising code make function creates UIs base ID changing aspects. example , choices different selectInput(), make function arguments id choices.first line UI module function always ns <- NS(id), creates shorthand way add base id id type. instead selectInput()'s name \"iris_dv\" \"mtcars_dv\", set ns(dv). ids need use ns() add namespace ID.Now, can replace two tabPanel definitions just following code.","code":"\niris_tab <- tabPanel(\n  \"iris\",\n  selectInput(\"iris_dv\", \"DV\", choices = names(iris)[1:4]),\n  plotOutput(\"iris_plot\"),\n  DT::dataTableOutput(\"iris_table\")\n)\n\nmtcars_tab <- tabPanel(\n  \"mtcars\",\n  selectInput(\"mtcars_dv\", \"DV\", choices = c(\"mpg\", \"disp\", \"hp\", \"drat\")),\n  plotOutput(\"mtcars_plot\"),\n  DT::dataTableOutput(\"mtcars_table\")\n)\ntabPanelUI <- function(id, choices) {\n    ns <- NS(id)\n    \n    tabPanel(\n        id,\n        selectInput(ns(\"dv\"), \"DV\", choices = choices),\n        plotOutput(ns(\"plot\")),\n        DT::dataTableOutput(ns(\"table\"))\n    )\n}\niris_tab <- tabPanelUI(\"iris\", names(iris)[1:4])\nmtcars_tab <- tabPanelUI(\"mtcars\", c(\"mpg\", \"disp\", \"hp\", \"drat\"))"},{"path":"modules.html","id":"modularizing-server-functions","chapter":"13 Shiny modules for repeated structures","heading":"13.2 Modularizing server functions","text":"original code, four functions create two output tables two output plots, also largely redundant.second step modularising code creating server function. can put functions relate inputs outputs UI function , include one make output table one make output plot.server function takes base id first argument, arguments need specify things change base implementations. , tables show different data plots use different groupings x axis fill, add arguments data group_by.server function always contains moduleServer() set like .can copy one set server functions , remove base name (e.g., \"iris_\" \"mtcars_\") inputs outputs, replace specific instances data grouping columns data group_by.original code, grouping variables unquoted, tricky pass unquoted variable names custom functions, already know refer columns character object using .data[[char_obj]].grouping column Species iris already factor, recasting factor hurt, required mtcars grouping column vs.Now, can replace four functions inside server function two lines code.example reduced code 4 lines, can save lot time, effort, debugging projects many similar modules. example, want change plots app use different geom, now change one function instead two.","code":"\noutput$iris_table <- DT::renderDataTable({\n    iris\n})\n\noutput$iris_plot <- renderPlot({\n    ggplot(iris, aes(x = Species, \n                     y = .data[[input$iris_dv]],\n                     fill = Species)) +\n        geom_violin(alpha = 0.5, show.legend = FALSE) +\n        scale_fill_viridis_d()\n})\n\noutput$mtcars_table <- DT::renderDataTable({\n    mtcars\n})\n\noutput$mtcars_plot <- renderPlot({\n    # handle non-string grouping\n    mtcars$vs <- factor(mtcars$vs)\n    ggplot(mtcars, aes(x = vs, \n                     y = .data[[input$mtcars_dv]],\n                     fill = vs)) +\n        geom_violin(alpha = 0.5, show.legend = FALSE) +\n        scale_fill_viridis_d()\n})\ntabPanelServer <- function(id, data, group_by) {\n    moduleServer(id, function(input, output, session) {\n      # code ...\n    })\n}\ntabPanelServer <- function(id, data, group_by) {\n    moduleServer(id, function(input, output, session) {\n        output$table <- DT::renderDataTable({\n            data\n        })\n        \n        output$plot <- renderPlot({\n            # handle non-string groupings\n            data[[group_by]] <- factor(data[[group_by]])\n            ggplot(data, aes(x = .data[[group_by]], \n                             y = .data[[input$dv]],\n                             fill = .data[[group_by]])) +\n                geom_violin(alpha = 0.5, show.legend = FALSE) +\n                scale_fill_viridis_d()\n        })\n    })\n}\ntabPanelServer(\"iris\", data = iris, group_by = \"Species\")\ntabPanelServer(\"mtcars\", data = mtcars, group_by = \"vs\")"},{"path":"modules.html","id":"resources-modules","chapter":"13 Shiny modules for repeated structures","heading":"13.3 Further Resources","text":"Mastering Shiny: ModulesModularizing Shiny app codeHow use Shiny Modules (video)","code":""},{"path":"modules.html","id":"exercises-modules","chapter":"13 Shiny modules for repeated structures","heading":"13.4 Exercises","text":"","code":""},{"path":"modules.html","id":"repeat-example","chapter":"13 Shiny modules for repeated structures","heading":"Repeat Example","text":"Try implement code .Clone \"no_modules_demo\" shinyintro::clone(\"no_modules_demo\")Run app see worksCreate UI module function use replace iris_tab mtcars_tabCreate server function use replace server functions","code":""},{"path":"modules.html","id":"new-instance","chapter":"13 Shiny modules for repeated structures","heading":"New Instance","text":"Add new tab called \"diamonds\" visualises diamonds dataset. Choose columns want choices selectInput() grouping column.can choose numeric columns choices.can group categorical columns: cut, color, clarity.","code":"\ndiamonds_tab <- tabPanelUI(\"diamonds\", c(\"carat\", \"depth\", \"table\", \"price\"))\ntabPanelServer(\"diamonds\", data = diamonds, group_by = \"cut\")"},{"path":"modules.html","id":"altering-modules","chapter":"13 Shiny modules for repeated structures","heading":"Altering modules","text":"Add another selectInput() UI allows user select grouping variable. (iris one possibility, mtcars diamonds several)need add new selectInput() tabPanel(). Remember use ns() id. choices select also differ data set, need add group_choices arguments function.Update plot function use value new input instead \"Species\", \"vs\", whatever chose diamonds.longer need group_by arguments function getting info input.Instead changing group_by input$group_by three places code , just added line group_by <- input$group_by top moduleServer().","code":"\ntabPanelUI <- function(id, choices, group_choices) {\n    ns <- NS(id)\n    \n    tabPanel(\n        id,\n        selectInput(ns(\"dv\"), \"DV\", choices = choices),\n        selectInput(ns(\"group_by\"), \"Group By\", choices = group_choices),\n        plotOutput(ns(\"plot\")),\n        DT::dataTableOutput(ns(\"table\"))\n    )\n}\ntabPanelServer <- function(id, data) {\n    moduleServer(id, function(input, output, session) {\n        group_by <- input$group_by\n      \n        # rest of the code is the same ...\n    })\n}"},{"path":"modules.html","id":"new-module","chapter":"13 Shiny modules for repeated structures","heading":"New module","text":"fluidRow() tabsetPanel() ui contains three infoBoxOutput() three renderInfoBoxOutput() functions server function.Modularise info boxes associated server functions.ui, replace fluidRow() :server(), replace three renderInfoBox() :","code":"\ninfoBoxUI <- function(id, width = 4) {\n    ns <- NS(id)\n\n    infoBoxOutput(ns(\"box\"), width)\n}\ninfoBoxServer <- function(id, title, fmt, icon, color = \"purple\") {\n    moduleServer(id, function(input, output, session) {\n        output$box <- renderInfoBox({\n            infoBox(title = title,\n                    value = format(Sys.Date(), fmt),\n                    icon = icon(icon),\n                    color = color)\n        })\n    })\n}\nfluidRow(\n    infoBoxUI(\"day\"),\n    infoBoxUI(\"month\"),\n    infoBoxUI(\"year\")\n)\ninfoBoxServer(\"year\", \"Year\", \"%Y\", \"calendar\")\ninfoBoxServer(\"month\", \"Month\", \"%m\", \"calendar-alt\")\ninfoBoxServer(\"day\", \"Day\", \"%d\", \"calendar-day\")"},{"path":"modules.html","id":"your-app-modules","chapter":"13 Shiny modules for repeated structures","heading":"13.5 Your app","text":"modularise custom app?","code":""},{"path":"installing-r.html","id":"installing-r","chapter":"A Installing R","heading":"A Installing R","text":"Installing R RStudio usually straightforward. sections explain helpful YouTube video .","code":""},{"path":"installing-r.html","id":"installing-base-r","chapter":"A Installing R","heading":"A.1 Installing Base R","text":"Install base R https://cran.rstudio.com/. Choose download link operating system (Linux, Mac OS X, Windows).Mac, install latest release newest R-x.x.x.pkg link (legacy version older operating system). install R, also install XQuartz able use visualisation packages.installing Windows version, choose \"base\" subdirectory click download link top page. install R, also install RTools; use \"recommended\" version highlighted near top list.using Linux, choose specific operating system follow installation instructions.","code":""},{"path":"installing-r.html","id":"installing-rstudio","chapter":"A Installing R","heading":"A.2 Installing RStudio","text":"Go rstudio.com download RStudio Desktop (Open Source License) version operating system list titled Installers Supported Platforms.","code":""},{"path":"installing-r.html","id":"rstudio-settings","chapter":"A Installing R","heading":"A.2.1 RStudio Settings","text":"settings fix immediately updating RStudio. Go Global Options... Tools menu (⌘,), General tab, uncheck box says Restore .RData workspace startup. keep things around workspace, things get messy, unexpected things happen. always start clear workspace. also means never want save workspace exit, set Never. thing want save scripts.may also want change appearance code. Different fonts themes can sometimes help visual difficulties [dyslexia]((https://datacarpentry.org/blog/2017/09/coding--dyslexia){target=\"_blank\"}. prefer dark background FiraCode font coding, use default theme screenshots book.may also want change settings Code tab. prefer two spaces instead tabs code like able see whitespace characters. matter personal preference.","code":""},{"path":"installing-r.html","id":"installing-shinyintro-1","chapter":"A Installing R","heading":"A.2.2 Installing shinyintro","text":"install class package, provide copy shiny apps use demos basic template, paste following code console RStudio.","code":"\n# you may have to install devtools first with \n# install.packages(\"devtools\")\n\ndevtools::install_github(\"debruine/shinyintro\")"},{"path":"installing-r.html","id":"installing-latex","chapter":"A Installing R","heading":"A.3 Installing LaTeX","text":"can install LaTeX typesetting system produce PDF reports RStudio. Without additional installation, able produce reports HTML PDF. course require make PDFs. generate PDF reports, additionally need:pandoc, andLaTeX, typesetting language, available \nWINDOWS: MikTeX\nMac OS: MacTex (3.2GB download) BasicTeX (78MB download, work fine)\nLinux: TeX Live\nWINDOWS: MikTeXMac OS: MacTex (3.2GB download) BasicTeX (78MB download, work fine)Linux: TeX Live","code":""},{"path":"symbols.html","id":"symbols","chapter":"B Symbols","heading":"B Symbols","text":"","code":""},{"path":"glossary.html","id":"glossary","chapter":"C Glossary","heading":"C Glossary","text":"See psyTeachR Glossary definitions R jargon.","code":""}]
